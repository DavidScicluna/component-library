/// <reference types="react" />
import type { FormsCommonProps, FormsCommonSize, FormsCommonVariant } from './common/types';
import type { FormProps, FormRef } from './components/Form';
import { Form } from './components/Form';
import type { FormControlContext, FormControlProps, FormControlRef, FormControlSize } from './components/FormControl';
import { FormControl } from './components/FormControl';
import type { FormDescriptionDefaultElement, FormDescriptionElement, FormDescriptionProps, FormDescriptionRef } from './components/FormDescription';
import { FormDescription } from './components/FormDescription';
import type { FormHeaderProps, FormHeaderRef, FormHeaderRenderProps } from './components/FormHeader';
import { FormHeader } from './components/FormHeader';
import type { FormHelperTextDefaultElement, FormHelperTextElement, FormHelperTextProps, FormHelperTextRef } from './components/FormHelperText';
import { FormHelperText } from './components/FormHelperText';
import type { FormLabelDefaultElement, FormLabelElement, FormLabelProps, FormLabelRef } from './components/FormLabel';
import { FormLabel } from './components/FormLabel';
import { NumberInput } from './components/NumberInput';
import type { TextareaChangeEvent, TextareaDefaultElement, TextareaElement, TextareaFocusEvent, TextareaMouseEvent, TextareaProps, TextareaRef, TextareaRenderProps, TextareaSize, TextareaVariant } from './components/Textarea';
import { Textarea } from './components/Textarea';
import type { TextInputChangeEvent, TextInputDefaultElement, TextInputElement, TextInputFocusEvent, TextInputMouseEvent, TextInputProps, TextInputRef, TextInputRenderProps, TextInputSize, TextInputVariant } from './components/TextInput';
import { TextInput } from './components/TextInput';
export declare const constants: {
    __DEFAULT_SWITCH_HAS_IO_LABEL__: true;
    __DEFAULT_SWITCH_ID__: string;
    __DEFAULT_SWITCH_IS_ACTIVE__: false;
    __DEFAULT_SWITCH_IS_CHECKED__: false;
    __DEFAULT_SWITCH_IS_CLICKABLE__: true;
    __DEFAULT_SWITCH_IS_COMPACT__: false;
    __DEFAULT_SWITCH_IS_DISABLED__: false;
    __DEFAULT_SWITCH_IS_ERROR__: false;
    __DEFAULT_SWITCH_IS_FOCUSED__: false;
    __DEFAULT_SWITCH_IS_OUTLINED__: false;
    __DEFAULT_SWITCH_IS_READONLY__: false;
    __DEFAULT_SWITCH_IS_REQUIRED__: false;
    __DEFAULT_SWITCH_IS_SUCCESS__: false;
    __DEFAULT_SWITCH_IS_WARNING__: false;
    __DEFAULT_SWITCH_LABEL_POSITION__: SwitchLabelPosition;
    __DEFAULT_SWITCH_LINE_HEIGHT_SIZE__: import("../..").ThemeLineHeight;
    __DEFAULT_SWITCH_SIZE__: FormsCommonSize;
    __DEFAULT_SWITCH_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_SEARCH_INPUT_ID__: string;
    __DEFAULT_SEARCH_INPUT_INITIAL_QUERY__: "";
    __DEFAULT_SEARCH_INPUT_IS_COMPACT__: false;
    __DEFAULT_SEARCH_INPUT_IS_DISABLED__: false;
    __DEFAULT_SEARCH_INPUT_IS_ERROR__: false;
    __DEFAULT_SEARCH_INPUT_IS_FOCUSED__: false;
    __DEFAULT_SEARCH_INPUT_IS_OUTLINED__: false;
    __DEFAULT_SEARCH_INPUT_IS_READONLY__: false;
    __DEFAULT_SEARCH_INPUT_IS_REQUIRED__: false;
    __DEFAULT_SEARCH_INPUT_IS_SUCCESS__: false;
    __DEFAULT_SEARCH_INPUT_IS_WARNING__: false;
    __DEFAULT_SEARCH_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_SEARCH_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_SEARCH_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_RATING_COUNT__: 10;
    __DEFAULT_RATING_DIRECTION__: RatingDirection;
    __DEFAULT_RATING_HIGHLIGHT_MODE__: import("./components/Rating/common/types").RatingHighlightMode;
    __DEFAULT_RATING_ICONS__: RatingIcons;
    __DEFAULT_RATING_ID__: string;
    __DEFAULT_RATING_IS_DISABLED__: false;
    __DEFAULT_RATING_IS_ERROR__: false;
    __DEFAULT_RATING_IS_READONLY__: false;
    __DEFAULT_RATING_IS_REQUIRED__: false;
    __DEFAULT_RATING_IS_SUCCESS__: false;
    __DEFAULT_RATING_IS_WARNING__: false;
    __DEFAULT_RATING_SIZE__: FormsCommonSize;
    __DEFAULT_RADIO_ID__: string;
    __DEFAULT_RADIO_IS_ACTIVE__: false;
    __DEFAULT_RADIO_IS_CHECKED__: false;
    __DEFAULT_RADIO_IS_CLICKABLE__: true;
    __DEFAULT_RADIO_IS_COMPACT__: false;
    __DEFAULT_RADIO_IS_DISABLED__: false;
    __DEFAULT_RADIO_IS_ERROR__: false;
    __DEFAULT_RADIO_IS_FOCUSED__: false;
    __DEFAULT_RADIO_IS_OUTLINED__: false;
    __DEFAULT_RADIO_IS_READONLY__: false;
    __DEFAULT_RADIO_IS_REQUIRED__: false;
    __DEFAULT_RADIO_IS_SUCCESS__: false;
    __DEFAULT_RADIO_IS_WARNING__: false;
    __DEFAULT_RADIO_LABEL_POSITION__: RadioLabelPosition;
    __DEFAULT_RADIO_LINE_HEIGHT_SIZE__: import("../..").ThemeLineHeight;
    __DEFAULT_RADIO_SIZE__: FormsCommonSize;
    __DEFAULT_RADIO_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_PASSWORD_INPUT_ID__: string;
    __DEFAULT_PASSWORD_INPUT_IS_COMPACT__: false;
    __DEFAULT_PASSWORD_INPUT_IS_DISABLED__: false;
    __DEFAULT_PASSWORD_INPUT_IS_ERROR__: false;
    __DEFAULT_PASSWORD_INPUT_IS_FOCUSED__: false;
    __DEFAULT_PASSWORD_INPUT_IS_OUTLINED__: false;
    __DEFAULT_PASSWORD_INPUT_IS_READONLY__: false;
    __DEFAULT_PASSWORD_INPUT_IS_REQUIRED__: false;
    __DEFAULT_PASSWORD_INPUT_IS_SUCCESS__: false;
    __DEFAULT_PASSWORD_INPUT_IS_WARNING__: false;
    __DEFAULT_PASSWORD_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_PASSWORD_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_PASSWORD_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_FILE_INPUT_ACCEPT__: "image/*";
    __DEFAULT_FILE_INPUT_DURATION__: import("../..").ThemeDuration;
    __DEFAULT_FILE_INPUT_ID__: string;
    __DEFAULT_FILE_INPUT_IS_COMPACT__: false;
    __DEFAULT_FILE_INPUT_IS_DISABLED__: false;
    __DEFAULT_FILE_INPUT_IS_ERROR__: false;
    __DEFAULT_FILE_INPUT_IS_FOCUSED__: false;
    __DEFAULT_FILE_INPUT_IS_MULTIPLE__: false;
    __DEFAULT_FILE_INPUT_IS_OUTLINED__: false;
    __DEFAULT_FILE_INPUT_IS_READONLY__: false;
    __DEFAULT_FILE_INPUT_IS_REQUIRED__: false;
    __DEFAULT_FILE_INPUT_IS_SUCCESS__: false;
    __DEFAULT_FILE_INPUT_IS_WARNING__: false;
    __DEFAULT_FILE_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_FILE_INPUT_TIMEOUT__: number;
    __DEFAULT_FILE_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_FILE_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_EMAIL_INPUT_ID__: string;
    __DEFAULT_EMAIL_INPUT_IS_COMPACT__: false;
    __DEFAULT_EMAIL_INPUT_IS_DISABLED__: false;
    __DEFAULT_EMAIL_INPUT_IS_ERROR__: false;
    __DEFAULT_EMAIL_INPUT_IS_FOCUSED__: false;
    __DEFAULT_EMAIL_INPUT_IS_OUTLINED__: false;
    __DEFAULT_EMAIL_INPUT_IS_READONLY__: false;
    __DEFAULT_EMAIL_INPUT_IS_REQUIRED__: false;
    __DEFAULT_EMAIL_INPUT_IS_SUCCESS__: false;
    __DEFAULT_EMAIL_INPUT_IS_WARNING__: false;
    __DEFAULT_EMAIL_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_EMAIL_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_EMAIL_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_CHECKBOX_ID__: string;
    __DEFAULT_CHECKBOX_IS_ACTIVE__: false;
    __DEFAULT_CHECKBOX_IS_CHECKED__: false;
    __DEFAULT_CHECKBOX_IS_CLICKABLE__: true;
    __DEFAULT_CHECKBOX_IS_COMPACT__: false;
    __DEFAULT_CHECKBOX_IS_DISABLED__: false;
    __DEFAULT_CHECKBOX_IS_ERROR__: false;
    __DEFAULT_CHECKBOX_IS_FOCUSED__: false;
    __DEFAULT_CHECKBOX_IS_INDETERMINATE__: false;
    __DEFAULT_CHECKBOX_IS_OUTLINED__: false;
    __DEFAULT_CHECKBOX_IS_READONLY__: false;
    __DEFAULT_CHECKBOX_IS_REQUIRED__: false;
    __DEFAULT_CHECKBOX_IS_SUCCESS__: false;
    __DEFAULT_CHECKBOX_IS_WARNING__: false;
    __DEFAULT_CHECKBOX_LABEL_POSITION__: CheckboxLabelPosition;
    __DEFAULT_CHECKBOX_LINE_HEIGHT_SIZE__: import("../..").ThemeLineHeight;
    __DEFAULT_CHECKBOX_SIZE__: FormsCommonSize;
    __DEFAULT_CHECKBOX_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_TEXT_INPUT_ID__: string;
    __DEFAULT_TEXT_INPUT_IS_COMPACT__: false;
    __DEFAULT_TEXT_INPUT_IS_DISABLED__: false;
    __DEFAULT_TEXT_INPUT_IS_ERROR__: false;
    __DEFAULT_TEXT_INPUT_IS_FOCUSED__: false;
    __DEFAULT_TEXT_INPUT_IS_OUTLINED__: false;
    __DEFAULT_TEXT_INPUT_IS_READONLY__: false;
    __DEFAULT_TEXT_INPUT_IS_REQUIRED__: false;
    __DEFAULT_TEXT_INPUT_IS_SUCCESS__: false;
    __DEFAULT_TEXT_INPUT_IS_WARNING__: false;
    __DEFAULT_TEXT_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_TEXT_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_TEXT_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_TEXTAREA_ID__: string;
    __DEFAULT_TEXTAREA_IS_COMPACT__: false;
    __DEFAULT_TEXTAREA_IS_DISABLED__: false;
    __DEFAULT_TEXTAREA_IS_ERROR__: false;
    __DEFAULT_TEXTAREA_IS_FOCUSED__: false;
    __DEFAULT_TEXTAREA_IS_OUTLINED__: false;
    __DEFAULT_TEXTAREA_IS_READONLY__: false;
    __DEFAULT_TEXTAREA_IS_REQUIRED__: false;
    __DEFAULT_TEXTAREA_IS_SUCCESS__: false;
    __DEFAULT_TEXTAREA_IS_WARNING__: false;
    __DEFAULT_TEXTAREA_RESIZE__: import("../..").ResizeClass;
    __DEFAULT_TEXTAREA_SIZE__: FormsCommonSize;
    __DEFAULT_TEXTAREA_VARIANT__: FormsCommonVariant;
    __DEFAULT_NUMBER_INPUT_ID__: string;
    __DEFAULT_NUMBER_INPUT_IS_COMPACT__: false;
    __DEFAULT_NUMBER_INPUT_IS_DISABLED__: false;
    __DEFAULT_NUMBER_INPUT_IS_ERROR__: false;
    __DEFAULT_NUMBER_INPUT_IS_FOCUSED__: false;
    __DEFAULT_NUMBER_INPUT_IS_OUTLINED__: false;
    __DEFAULT_NUMBER_INPUT_IS_READONLY__: false;
    __DEFAULT_NUMBER_INPUT_IS_REQUIRED__: false;
    __DEFAULT_NUMBER_INPUT_IS_SUCCESS__: false;
    __DEFAULT_NUMBER_INPUT_IS_WARNING__: false;
    __DEFAULT_NUMBER_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_NUMBER_INPUT_START_VALUE__: 0;
    __DEFAULT_NUMBER_INPUT_STEP__: 1;
    __DEFAULT_NUMBER_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_NUMBER_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_FORM_CONTROL_HAS_FORM_CONTROL__: true;
    __DEFAULT_FORM_CONTROL_ID__: string;
    __DEFAULT_FORM_CONTROL_IS_DISABLED__: false;
    __DEFAULT_FORM_CONTROL_IS_ERROR__: false;
    __DEFAULT_FORM_CONTROL_IS_FOCUSED__: false;
    __DEFAULT_FORM_CONTROL_IS_READONLY__: false;
    __DEFAULT_FORM_CONTROL_IS_REQUIRED__: false;
    __DEFAULT_FORM_CONTROL_IS_SUCCESS__: false;
    __DEFAULT_FORM_CONTROL_IS_WARNING__: false;
    __DEFAULT_FORM_CONTROL_SIZE__: FormsCommonSize;
    __DEFAULT_FORM_CONTROL_SPACING__: import("../..").ThemeSpacing;
    __DEFAULT_FORMS_IS_COMPACT__: false;
    __DEFAULT_FORMS_IS_DISABLED__: false;
    __DEFAULT_FORMS_IS_ERROR__: false;
    __DEFAULT_FORMS_IS_FOCUSED__: false;
    __DEFAULT_FORMS_IS_OUTLINED__: false;
    __DEFAULT_FORMS_IS_READONLY__: false;
    __DEFAULT_FORMS_IS_REQUIRED__: false;
    __DEFAULT_FORMS_IS_SUCCESS__: false;
    __DEFAULT_FORMS_IS_WARNING__: false;
    __DEFAULT_FORMS_LINE_HEIGHT_SIZE__: import("../..").ThemeLineHeight;
    __DEFAULT_FORMS_SIZE__: FormsCommonSize;
    __DEFAULT_FORMS_VARIANT__: FormsCommonVariant;
};
export declare const keys: {
    __KEYS_SWITCH_CLASS__: "ds-cl-switch";
    __KEYS_SEARCH_INPUT_CLASS__: "ds-cl-search-input";
    __KEYS_RATING_CLASS__: "ds-cl-rating";
    __KEYS_RADIO_CLASS__: "ds-cl-radio";
    __KEYS_PASSWORD_INPUT_CLASS__: "ds-cl-password-input";
    __KEYS_FILE_INPUT_CLASS__: "ds-cl-file-input";
    __KEYS_EMAIL_INPUT_CLASS__: "ds-cl-email-input";
    __KEYS_CHECKBOX_CLASS__: "ds-cl-checkbox";
    __KEYS_TEXT_INPUT_CLASS__: "ds-cl-text-input";
    __KEYS_TEXTAREA_CLASS__: "ds-cl-textarea";
    __KEYS_TEXTAREA_TOTAL_CLASS__: "ds-cl-textarea-total";
    __KEYS_NUMBER_INPUT_CLASS__: "ds-cl-number-input";
    __KEYS_FORM_LABEL_CLASS__: "ds-cl-form-label";
    __KEYS_FORM_HELPER_TEXT_CLASS__: "ds-cl-form-helper-text";
    __KEYS_FORM_HEADER_CLASS__: "ds-cl-form-header";
    __KEYS_FORM_DESCRIPTION_CLASS__: "ds-cl-form-description";
    __KEYS_FORM_CONTROL_CLASS__: "ds-cl-form-control";
    __KEYS_FORM_CLASS__: "ds-cl-form";
};
export declare const hooks: {
    useSwitchClasses: <Element_1 extends import("react").ElementType = "div">(props: {
        isActive: SwitchProps<Element_1>["isActive"];
        isDisabled: SwitchProps<Element_1>["isDisabled"];
        isClickable: SwitchProps<Element_1>["isClickable"];
        isReadOnly: SwitchProps<Element_1>["isReadOnly"];
    }) => string;
    useSwitchIconSize: <Element_2 extends import("react").ElementType = "div">(props: {
        size: SwitchProps<Element_2>["size"];
        isCompact: SwitchProps<Element_2>["isCompact"];
    }) => {
        size?: import("../..").ResponsiveValue<import("../DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: import("../..").ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: import("../..").ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useSwitchResponsiveValues: <Element_3 extends import("react").ElementType = "div">(props: {
        size: SwitchProps<Element_3>["size"];
        isActive: SwitchProps<Element_3>["isActive"];
        isDisabled: SwitchProps<Element_3>["isDisabled"];
        isFocused: SwitchProps<Element_3>["isFocused"];
        isOutlined: SwitchProps<Element_3>["isOutlined"];
        isCompact: SwitchProps<Element_3>["isCompact"];
        isClickable: SwitchProps<Element_3>["isClickable"];
        isError: SwitchProps<Element_3>["isError"];
        isReadOnly: SwitchProps<Element_3>["isReadOnly"];
        isRequired: SwitchProps<Element_3>["isRequired"];
        isSuccess: SwitchProps<Element_3>["isSuccess"];
        isWarning: SwitchProps<Element_3>["isWarning"];
        isChecked: SwitchProps<Element_3>["isChecked"];
        labelPosition: SwitchProps<Element_3>["labelPosition"];
        hasIOLabel: SwitchProps<Element_3>["hasIOLabel"];
    }) => {
        hasIOLabel: boolean;
        isActive: boolean;
        isChecked: boolean;
        isClickable: boolean;
        isCompact: boolean;
        isDisabled: boolean;
        isError: boolean;
        isFocused: boolean;
        isOutlined: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        labelPosition: SwitchLabelPosition;
        size: FormsCommonSize;
    };
    useSwitchSizeConfig: <Element_4 extends import("react").ElementType = "div">(props: {
        size: SwitchProps<Element_4>["size"];
        isCompact: SwitchProps<Element_4>["isCompact"];
    }) => {
        fontSize: import("../..").ThemeFontSize;
        padding: Record<"x" | "y", import("../..").ThemeSpacing>;
        radius: import("../..").ThemeRadius;
        spacing: import("../..").ThemeSpacing;
    };
    useRatingClasses: <Element_5 extends import("react").ElementType = "div">(props: {
        isDisabled: RatingProps<Element_5>["isDisabled"];
        isReadOnly: RatingProps<Element_5>["isReadOnly"];
    }) => string;
    useRatingIconSize: <Element_6 extends import("react").ElementType = "div">(props: {
        size: RatingProps<Element_6>["size"];
    }) => {
        size?: import("../..").ResponsiveValue<import("../DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: import("../..").ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: import("../..").ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useRatingResponsiveValues: <Element_7 extends import("react").ElementType = "div">(props: {
        direction: RatingProps<Element_7>["direction"];
        size: RatingProps<Element_7>["size"];
        isDisabled: RatingProps<Element_7>["isDisabled"];
        count: RatingProps<Element_7>["count"];
        isError: RatingProps<Element_7>["isError"];
        isReadOnly: RatingProps<Element_7>["isReadOnly"];
        isRequired: RatingProps<Element_7>["isRequired"];
        isSuccess: RatingProps<Element_7>["isSuccess"];
        isWarning: RatingProps<Element_7>["isWarning"];
        highlightMode: RatingProps<Element_7>["highlightMode"];
    }) => {
        count: number;
        direction: RatingDirection;
        highlightMode: import("./components/Rating/common/types").RatingHighlightMode;
        isDisabled: boolean;
        isError: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        size: FormsCommonSize;
    };
    useRadioClasses: <Element_8 extends import("react").ElementType = "div">(props: {
        isActive: RadioProps<Element_8>["isActive"];
        isDisabled: RadioProps<Element_8>["isDisabled"];
        isClickable: RadioProps<Element_8>["isClickable"];
        isReadOnly: RadioProps<Element_8>["isReadOnly"];
    }) => string;
    useRadioIconSize: <Element_9 extends import("react").ElementType = "div">(props: {
        size: RadioProps<Element_9>["size"];
        isCompact: RadioProps<Element_9>["isCompact"];
    }) => {
        size?: import("../..").ResponsiveValue<import("../DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: import("../..").ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: import("../..").ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useRadioResponsiveValues: <Element_10 extends import("react").ElementType = "div">(props: {
        size: RadioProps<Element_10>["size"];
        isActive: RadioProps<Element_10>["isActive"];
        isDisabled: RadioProps<Element_10>["isDisabled"];
        isFocused: RadioProps<Element_10>["isFocused"];
        isOutlined: RadioProps<Element_10>["isOutlined"];
        isCompact: RadioProps<Element_10>["isCompact"];
        isClickable: RadioProps<Element_10>["isClickable"];
        isError: RadioProps<Element_10>["isError"];
        isReadOnly: RadioProps<Element_10>["isReadOnly"];
        isRequired: RadioProps<Element_10>["isRequired"];
        isSuccess: RadioProps<Element_10>["isSuccess"];
        isWarning: RadioProps<Element_10>["isWarning"];
        isChecked: RadioProps<Element_10>["isChecked"];
        labelPosition: RadioProps<Element_10>["labelPosition"];
    }) => {
        isActive: boolean;
        isChecked: boolean;
        isClickable: boolean;
        isCompact: boolean;
        isDisabled: boolean;
        isError: boolean;
        isFocused: boolean;
        isOutlined: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        labelPosition: RadioLabelPosition;
        size: FormsCommonSize;
    };
    useRadioSizeConfig: <Element_11 extends import("react").ElementType = "div">(props: {
        size: RadioProps<Element_11>["size"];
        isCompact: RadioProps<Element_11>["isCompact"];
    }) => {
        fontSize: import("../..").ThemeFontSize;
        padding: Record<"x" | "y", import("../..").ThemeSpacing>;
        radius: import("../..").ThemeRadius;
        spacing: import("../..").ThemeSpacing;
    };
    useCheckboxClasses: <Element_12 extends import("react").ElementType = "div">(props: {
        isActive: CheckboxProps<Element_12>["isActive"];
        isDisabled: CheckboxProps<Element_12>["isDisabled"];
        isClickable: CheckboxProps<Element_12>["isClickable"];
        isReadOnly: CheckboxProps<Element_12>["isReadOnly"];
    }) => string;
    useCheckboxIconSize: <Element_13 extends import("react").ElementType = "div">(props: {
        size: CheckboxProps<Element_13>["size"];
        isCompact: CheckboxProps<Element_13>["isCompact"];
    }) => {
        size?: import("../..").ResponsiveValue<import("../DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: import("../..").ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: import("../..").ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useCheckboxResponsiveValues: <Element_14 extends import("react").ElementType = "div">(props: {
        size: CheckboxProps<Element_14>["size"];
        isActive: CheckboxProps<Element_14>["isActive"];
        isDisabled: CheckboxProps<Element_14>["isDisabled"];
        isFocused: CheckboxProps<Element_14>["isFocused"];
        isOutlined: CheckboxProps<Element_14>["isOutlined"];
        isCompact: CheckboxProps<Element_14>["isCompact"];
        isIndeterminate: CheckboxProps<Element_14>["isIndeterminate"];
        isClickable: CheckboxProps<Element_14>["isClickable"];
        isError: CheckboxProps<Element_14>["isError"];
        isReadOnly: CheckboxProps<Element_14>["isReadOnly"];
        isRequired: CheckboxProps<Element_14>["isRequired"];
        isSuccess: CheckboxProps<Element_14>["isSuccess"];
        isWarning: CheckboxProps<Element_14>["isWarning"];
        isChecked: CheckboxProps<Element_14>["isChecked"];
        labelPosition: CheckboxProps<Element_14>["labelPosition"];
    }) => {
        isActive: boolean;
        isChecked: boolean;
        isClickable: boolean;
        isCompact: boolean;
        isDisabled: boolean;
        isError: boolean;
        isFocused: boolean;
        isIndeterminate: boolean;
        isOutlined: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        labelPosition: CheckboxLabelPosition;
        size: FormsCommonSize;
    };
    useCheckboxSizeConfig: <Element_15 extends import("react").ElementType = "div">(props: {
        size: CheckboxProps<Element_15>["size"];
        isCompact: CheckboxProps<Element_15>["isCompact"];
    }) => {
        fontSize: import("../..").ThemeFontSize;
        padding: Record<"x" | "y", import("../..").ThemeSpacing>;
        radius: import("../..").ThemeRadius;
        spacing: import("../..").ThemeSpacing;
    };
    useFormControlContext: <Element_16 extends import("react").ElementType = "div">() => {
        color: FormControlProps<Element_16>["color"];
        colorMode: FormControlProps<Element_16>["colorMode"];
        id: string | FormControlProps<Element_16>["id"];
        hasFormControl: import("../..").ResponsiveValue<boolean>;
        isDisabled: boolean;
        isError: boolean;
        isFocused: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        size: FormsCommonSize;
        spacing: import("../..").ThemeSpacing;
    };
    useFormControlFontSize: <Element_17 extends import("react").ElementType = "div">(props: {
        size: FormControlProps<Element_17>["size"];
    }) => {
        label: import("../..").ThemeFontSize;
        description: import("../..").ThemeFontSize;
        helper: import("../..").ThemeFontSize;
    };
    useFormsClasses: (props: {
        color?: import("../..").ThemeAppColor | undefined;
        size?: import("../..").ResponsiveValue<FormsCommonSize> | undefined;
        colorMode?: import("../..").ThemeAppColorMode | undefined;
        isDisabled?: import("../..").ResponsiveValue<boolean> | undefined;
        isOutlined?: import("../..").ResponsiveValue<boolean> | undefined;
        variant?: import("../..").ResponsiveValue<FormsCommonVariant> | undefined;
        isCompact?: import("../..").ResponsiveValue<boolean> | undefined;
        isError?: import("../..").ResponsiveValue<boolean> | undefined;
        isReadOnly?: import("../..").ResponsiveValue<boolean> | undefined;
        isSuccess?: import("../..").ResponsiveValue<boolean> | undefined;
        isWarning?: import("../..").ResponsiveValue<boolean> | undefined;
    }) => {
        container: string;
        element: string;
    };
    useFormsIconSize: (props: {
        size?: import("../..").ResponsiveValue<FormsCommonSize> | undefined;
        variant?: import("../..").ResponsiveValue<FormsCommonVariant> | undefined;
        isCompact?: import("../..").ResponsiveValue<boolean> | undefined;
    }) => {
        size?: import("../..").ResponsiveValue<import("../DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: import("../..").ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: import("../..").ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useFormsSizeConfig: (props: {
        size?: import("../..").ResponsiveValue<FormsCommonSize> | undefined;
        variant?: import("../..").ResponsiveValue<FormsCommonVariant> | undefined;
        isCompact?: import("../..").ResponsiveValue<boolean> | undefined;
    }) => {
        fontSize: import("../..").ThemeFontSize;
        padding: Record<"x" | "y", import("../..").ThemeSpacing>;
        radius: import("../..").ThemeRadius;
        spacing: import("../..").ThemeSpacing;
    };
    useFormsStyles: (props: Pick<FormsCommonProps, "color" | "colorMode" | "isDisabled" | "isFocused" | "variant" | "isError" | "isReadOnly" | "isSuccess" | "isWarning"> & {
        element: "input" | "textarea";
    }) => import("@emotion/serialize").CSSObject;
};
import type { CheckboxChangeEvent, CheckboxFocusEvent, CheckboxLabelPosition, CheckboxMouseEvent, CheckboxProps, CheckboxRef, CheckboxSize } from './components/Checkbox';
import { Checkbox } from './components/Checkbox';
import type { EmailInputChangeEvent, EmailInputDefaultElement, EmailInputElement, EmailInputFocusEvent, EmailInputMouseEvent, EmailInputProps, EmailInputRef, EmailInputRenderProps, EmailInputSize, EmailInputVariant } from './components/EmailInput';
import { EmailInput } from './components/EmailInput';
import type { FileInputBlob, FileInputBlobs, FileInputChangeEvent, FileInputDefaultElement, FileInputElement, FileInputError, FileInputErrors, FileInputFocusEvent, FileInputMouseEvent, FileInputProps, FileInputRef, FileInputRenderProps, FileInputSize, FileInputVariant } from './components/FileInput';
import { FileInput } from './components/FileInput';
import type { NumberInputChangeEvent, NumberInputDefaultElement, NumberInputElement, NumberInputFocusEvent, NumberInputMouseEvent, NumberInputProps, NumberInputRef, NumberInputRenderControlsProps, NumberInputRenderProps, NumberInputSize, NumberInputVariant } from './components/NumberInput';
import type { PasswordInputChangeEvent, PasswordInputDefaultElement, PasswordInputElement, PasswordInputFocusEvent, PasswordInputMouseEvent, PasswordInputProps, PasswordInputRef, PasswordInputRenderProps, PasswordInputSize, PasswordInputVariant } from './components/PasswordInput';
import { PasswordInput } from './components/PasswordInput';
import type { RadioChangeEvent, RadioFocusEvent, RadioLabelPosition, RadioMouseEvent, RadioProps, RadioRef, RadioSize } from './components/Radio';
import { Radio } from './components/Radio';
import type { RatingDirection, RatingIcons, RatingProps, RatingRef, RatingSize } from './components/Rating';
import { Rating } from './components/Rating';
import type { SearchInputChangeEvent, SearchInputDefaultElement, SearchInputElement, SearchInputFocusEvent, SearchInputMouseEvent, SearchInputProps, SearchInputRef, SearchInputRenderProps, SearchInputSize, SearchInputVariant } from './components/SearchInput';
import { SearchInput } from './components/SearchInput';
import type { SwitchChangeEvent, SwitchFocusEvent, SwitchLabelPosition, SwitchMouseEvent, SwitchProps, SwitchRef, SwitchSize } from './components/Switch';
import { Switch } from './components/Switch';
export { Checkbox, EmailInput, FileInput, Form, FormControl, FormDescription, FormHeader, FormHelperText, FormLabel, NumberInput, PasswordInput, Radio, Rating, SearchInput, Switch, Textarea, TextInput };
export type { CheckboxChangeEvent, CheckboxFocusEvent, CheckboxLabelPosition, CheckboxMouseEvent, CheckboxProps, CheckboxRef, CheckboxSize, EmailInputChangeEvent, EmailInputDefaultElement, EmailInputElement, EmailInputFocusEvent, EmailInputMouseEvent, EmailInputProps, EmailInputRef, EmailInputRenderProps, EmailInputSize, EmailInputVariant, FileInputBlob, FileInputBlobs, FileInputChangeEvent, FileInputDefaultElement, FileInputElement, FileInputError, FileInputErrors, FileInputFocusEvent, FileInputMouseEvent, FileInputProps, FileInputRef, FileInputRenderProps, FileInputSize, FileInputVariant, FormControlContext, FormControlProps, FormControlRef, FormControlSize, FormDescriptionDefaultElement, FormDescriptionElement, FormDescriptionProps, FormDescriptionRef, FormHeaderProps, FormHeaderRef, FormHeaderRenderProps, FormHelperTextDefaultElement, FormHelperTextElement, FormHelperTextProps, FormHelperTextRef, FormLabelDefaultElement, FormLabelElement, FormLabelProps, FormLabelRef, FormProps, FormRef, FormsCommonProps, FormsCommonSize, FormsCommonVariant, NumberInputChangeEvent, NumberInputDefaultElement, NumberInputElement, NumberInputFocusEvent, NumberInputMouseEvent, NumberInputProps, NumberInputRef, NumberInputRenderControlsProps, NumberInputRenderProps, NumberInputSize, NumberInputVariant, PasswordInputChangeEvent, PasswordInputDefaultElement, PasswordInputElement, PasswordInputFocusEvent, PasswordInputMouseEvent, PasswordInputProps, PasswordInputRef, PasswordInputRenderProps, PasswordInputSize, PasswordInputVariant, RadioChangeEvent, RadioFocusEvent, RadioLabelPosition, RadioMouseEvent, RadioProps, RadioRef, RadioSize, RatingDirection, RatingIcons, RatingProps, RatingRef, RatingSize, SearchInputChangeEvent, SearchInputDefaultElement, SearchInputElement, SearchInputFocusEvent, SearchInputMouseEvent, SearchInputProps, SearchInputRef, SearchInputRenderProps, SearchInputSize, SearchInputVariant, SwitchChangeEvent, SwitchFocusEvent, SwitchLabelPosition, SwitchMouseEvent, SwitchProps, SwitchRef, SwitchSize, TextareaChangeEvent, TextareaDefaultElement, TextareaElement, TextareaFocusEvent, TextareaMouseEvent, TextareaProps, TextareaRef, TextareaRenderProps, TextareaSize, TextareaVariant, TextInputChangeEvent, TextInputDefaultElement, TextInputElement, TextInputFocusEvent, TextInputMouseEvent, TextInputProps, TextInputRef, TextInputRenderProps, TextInputSize, TextInputVariant };
//# sourceMappingURL=index.d.ts.map