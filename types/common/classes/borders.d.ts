import type { BorderStyleClassObj, OutlineOffsetClassObj, OutlineStyleClassObj, OutlineWidthClassObj, ThemeBorderWidthObj, ThemeColorObj, ThemeColorOpacityObj, ThemeRadiusObj } from '@common/types';
declare const _default: {
    border_width: {
        hover: ThemeBorderWidthObj;
        focus: ThemeBorderWidthObj;
        active: ThemeBorderWidthObj;
        before: ThemeBorderWidthObj;
        after: ThemeBorderWidthObj;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
    };
    border_x_width: {
        hover: ThemeBorderWidthObj;
        focus: ThemeBorderWidthObj;
        active: ThemeBorderWidthObj;
        before: ThemeBorderWidthObj;
        after: ThemeBorderWidthObj;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
    };
    border_y_width: {
        hover: ThemeBorderWidthObj;
        focus: ThemeBorderWidthObj;
        active: ThemeBorderWidthObj;
        before: ThemeBorderWidthObj;
        after: ThemeBorderWidthObj;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
    };
    border_l_width: {
        hover: ThemeBorderWidthObj;
        focus: ThemeBorderWidthObj;
        active: ThemeBorderWidthObj;
        before: ThemeBorderWidthObj;
        after: ThemeBorderWidthObj;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
    };
    border_t_width: {
        hover: ThemeBorderWidthObj;
        focus: ThemeBorderWidthObj;
        active: ThemeBorderWidthObj;
        before: ThemeBorderWidthObj;
        after: ThemeBorderWidthObj;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
    };
    border_r_width: {
        hover: ThemeBorderWidthObj;
        focus: ThemeBorderWidthObj;
        active: ThemeBorderWidthObj;
        before: ThemeBorderWidthObj;
        after: ThemeBorderWidthObj;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
    };
    border_b_width: {
        hover: ThemeBorderWidthObj;
        focus: ThemeBorderWidthObj;
        active: ThemeBorderWidthObj;
        before: ThemeBorderWidthObj;
        after: ThemeBorderWidthObj;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
    };
    border_style: {
        hover: BorderStyleClassObj;
        focus: BorderStyleClassObj;
        active: BorderStyleClassObj;
        before: BorderStyleClassObj;
        after: BorderStyleClassObj;
        hidden: string;
        none: string;
        dashed: string;
        dotted: string;
        double: string;
        solid: string;
    };
    border_color: {
        opacity: ThemeColorOpacityObj;
        hover: ThemeColorObj;
        focus: ThemeColorObj;
        active: ThemeColorObj;
        before: ThemeColorObj;
        after: ThemeColorObj;
        gray: Record<import("@common/types").ThemeColorHue, string>;
        red: Record<import("@common/types").ThemeColorHue, string>;
        pink: Record<import("@common/types").ThemeColorHue, string>;
        purple: Record<import("@common/types").ThemeColorHue, string>;
        deep_purple: Record<import("@common/types").ThemeColorHue, string>;
        indigo: Record<import("@common/types").ThemeColorHue, string>;
        blue: Record<import("@common/types").ThemeColorHue, string>;
        light_blue: Record<import("@common/types").ThemeColorHue, string>;
        cyan: Record<import("@common/types").ThemeColorHue, string>;
        teal: Record<import("@common/types").ThemeColorHue, string>;
        green: Record<import("@common/types").ThemeColorHue, string>;
        light_green: Record<import("@common/types").ThemeColorHue, string>;
        lime: Record<import("@common/types").ThemeColorHue, string>;
        yellow: Record<import("@common/types").ThemeColorHue, string>;
        orange: Record<import("@common/types").ThemeColorHue, string>;
        deep_orange: Record<import("@common/types").ThemeColorHue, string>;
        transparent: string;
        black: string;
        white: string;
    };
    border_radius: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    border_radius_t: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    border_radius_r: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    border_radius_b: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    border_radius_l: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    border_radius_tl: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    border_radius_tr: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    border_radius_br: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    border_radius_bl: {
        hover: ThemeRadiusObj;
        focus: ThemeRadiusObj;
        active: ThemeRadiusObj;
        before: ThemeRadiusObj;
        after: ThemeRadiusObj;
        important: ThemeRadiusObj;
        base: string;
        inherit: string;
        none: string;
        xs: string;
        sm: string;
        lg: string;
        xl: string;
        full: string;
    };
    outline_width: {
        hover: OutlineWidthClassObj;
        focus: OutlineWidthClassObj;
        focus_visible: OutlineWidthClassObj;
        active: OutlineWidthClassObj;
        before: OutlineWidthClassObj;
        after: OutlineWidthClassObj;
        0: string;
        1: string;
        2: string;
        4: string;
        8: string;
    };
    outline_style: {
        hover: OutlineStyleClassObj;
        focus: OutlineStyleClassObj;
        focus_visible: OutlineStyleClassObj;
        active: OutlineStyleClassObj;
        before: OutlineStyleClassObj;
        after: OutlineStyleClassObj;
        none: string;
        dashed: string;
        dotted: string;
        double: string;
        solid: string;
    };
    outline_offset: {
        hover: OutlineOffsetClassObj;
        focus: OutlineOffsetClassObj;
        focus_visible: OutlineOffsetClassObj;
        active: OutlineOffsetClassObj;
        before: OutlineOffsetClassObj;
        after: OutlineOffsetClassObj;
        0: string;
        1: string;
        2: string;
        4: string;
        8: string;
    };
    outline_color: {
        opacity: ThemeColorOpacityObj;
        hover: ThemeColorObj;
        focus: ThemeColorObj;
        focus_visible: ThemeColorObj;
        active: ThemeColorObj;
        before: ThemeColorObj;
        after: ThemeColorObj;
        gray: Record<import("@common/types").ThemeColorHue, string>;
        red: Record<import("@common/types").ThemeColorHue, string>;
        pink: Record<import("@common/types").ThemeColorHue, string>;
        purple: Record<import("@common/types").ThemeColorHue, string>;
        deep_purple: Record<import("@common/types").ThemeColorHue, string>;
        indigo: Record<import("@common/types").ThemeColorHue, string>;
        blue: Record<import("@common/types").ThemeColorHue, string>;
        light_blue: Record<import("@common/types").ThemeColorHue, string>;
        cyan: Record<import("@common/types").ThemeColorHue, string>;
        teal: Record<import("@common/types").ThemeColorHue, string>;
        green: Record<import("@common/types").ThemeColorHue, string>;
        light_green: Record<import("@common/types").ThemeColorHue, string>;
        lime: Record<import("@common/types").ThemeColorHue, string>;
        yellow: Record<import("@common/types").ThemeColorHue, string>;
        orange: Record<import("@common/types").ThemeColorHue, string>;
        deep_orange: Record<import("@common/types").ThemeColorHue, string>;
        transparent: string;
        black: string;
        white: string;
    };
};
export default _default;
//# sourceMappingURL=borders.d.ts.map