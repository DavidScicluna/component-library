/// <reference types="react" />
import type { AlignContentClass, AlignContentClassArr, AlignContentClassObj, AlignItemsClass, AlignItemsClassArr, AlignItemsClassObj, AlignSelfClass, AlignSelfClassArr, AlignSelfClassObj, AnimationClass, AnimationClassArr, AnimationClassObj, AnimationConfig, AnimationDelay, AnimationDuration, AnimationEasing, BackgroundAttachmentClass, BackgroundAttachmentClassArr, BackgroundAttachmentClassObj, BackgroundBlendModeClass, BackgroundBlendModeClassArr, BackgroundBlendModeClassObj, BackgroundClipClass, BackgroundClipClassArr, BackgroundClipClassObj, BackgroundColorClass, BackgroundColorClassArr, BackgroundColorClassObj, BackgroundOriginClass, BackgroundOriginClassArr, BackgroundOriginClassObj, BackgroundPositionClass, BackgroundPositionClassArr, BackgroundPositionClassObj, BackgroundRepeatClass, BackgroundRepeatClassArr, BackgroundRepeatClassObj, BackgroundSizeClass, BackgroundSizeClassArr, BackgroundSizeClassObj, BorderColorClass, BorderColorClassArr, BorderColorClassObj, BorderStyleClass, BorderStyleClassArr, BorderStyleClassObj, BoxShadowClass, BoxShadowClassArr, BoxShadowClassObj, BoxShadowColorClass, BoxShadowColorClassArr, BoxShadowColorClassObj, BrightnessClass, BrightnessClassArr, BrightnessClassObj, CaretColorClass, CaretColorClassArr, CaretColorClassObj, ClassName, ClassNames, ColorTypeClass, ContrastClass, ContrastClassArr, ContrastClassObj, CursorClass, CursorClassArr, CursorClassObj, DisplayClass, DisplayClassArr, DisplayClassObj, DropShadowClass, DropShadowClassArr, DropShadowClassObj, FillColorClass, FillColorClassArr, FillColorClassObj, FlexColumnClass, FlexColumnClassArr, FlexColumnClassObj, FlexDirectionClass, FlexDirectionClassArr, FlexDirectionClassObj, FlexWrapClass, FlexWrapClassArr, FlexWrapClassObj, FontStyleClass, FontStyleClassArr, FontStyleClassObj, GradientClass, GradientClassArr, GradientClassObj, GradientFromColorClass, GradientFromColorClassArr, GradientFromColorClassObj, GradientFromMiddleToClass, GradientFromMiddleToClassArr, GradientFromMiddleToClassObj, GradientMiddleColorClass, GradientMiddleColorClassArr, GradientMiddleColorClassObj, GradientToColorClass, GradientToColorClassArr, GradientToColorClassObj, GrayscaleClass, GrayscaleClassArr, GrayscaleClassObj, GridAutoClass, GridAutoClassArr, GridAutoClassObj, GridAutoFlowClass, GridAutoFlowClassArr, GridAutoFlowClassObj, GridColumnClass, GridColumnClassArr, GridColumnClassObj, GridColumnSpanClass, GridColumnSpanClassArr, GridColumnSpanClassObj, GridColumnStartEndClass, GridColumnStartEndClassArr, GridColumnStartEndClassObj, GridRowClass, GridRowClassArr, GridRowClassObj, GridRowSpanClass, GridRowSpanClassArr, GridRowSpanClassObj, GridRowStartEndClass, GridRowStartEndClassArr, GridRowStartEndClassObj, GridTemplateColumnsClass, GridTemplateColumnsClassArr, GridTemplateColumnsClassObj, GridTemplateRowsClass, GridTemplateRowsClassArr, GridTemplateRowsClassObj, HeightClass, HeightClassArr, HeightClassObj, HueRotateClass, HueRotateClassArr, HueRotateClassObj, IconKey, IconKeys, InvertClass, InvertClassArr, InvertClassObj, JustifyContentClass, JustifyContentClassArr, JustifyContentClassObj, JustifyItemsClass, JustifyItemsClassArr, JustifyItemsClassObj, JustifySelfClass, JustifySelfClassArr, JustifySelfClassObj, MaxHeightClass, MaxHeightClassArr, MaxHeightClassObj, MaxWidthClass, MaxWidthClassArr, MaxWidthClassObj, MinHeightClass, MinHeightClassArr, MinHeightClassObj, MinWidthClass, MinWidthClassArr, MinWidthClassObj, MixBlendModeClass, MixBlendModeClassArr, MixBlendModeClassObj, Nullish, ObjectFitClass, ObjectFitClassArr, ObjectFitClassObj, ObjectPositionClass, ObjectPositionClassArr, ObjectPositionClassObj, OpacityClass, OpacityClassArr, OpacityClassObj, OutlineColorClass, OutlineColorClassArr, OutlineColorClassObj, OutlineOffsetClass, OutlineOffsetClassArr, OutlineOffsetClassObj, OutlineStyleClass, OutlineStyleClassArr, OutlineStyleClassObj, OutlineWidthClass, OutlineWidthClassArr, OutlineWidthClassObj, OverflowClass, OverflowClassArr, OverflowClassObj, PickFrom, PlaceContentClass, PlaceContentClassArr, PlaceContentClassObj, PlaceItemsClass, PlaceItemsClassArr, PlaceItemsClassObj, PlaceSelfClass, PlaceSelfClassArr, PlaceSelfClassObj, PointerEventsClass, PointerEventsClassArr, PointerEventsClassObj, PolymorphicChangeEvent, PolymorphicComponentProps, PolymorphicDefaultElement, PolymorphicFocusEvent, PolymorphicFormEvent, PolymorphicMouseEvent, PolymorphicRef, PositionClass, PositionClassArr, PositionClassObj, ResizeClass, ResizeClassArr, ResizeClassObj, ResponsiveArrayValue, ResponsiveObjectValue, ResponsiveValue, RotateClass, RotateClassArr, RotateClassObj, SaturateClass, SaturateClassArr, SaturateClassObj, ScaleClass, ScaleClassArr, ScaleClassObj, ScrollbarClass, ScrollbarClassArr, ScrollbarClassObj, ScrollBehaviorClass, ScrollBehaviorClassArr, ScrollBehaviorClassObj, ScrollSnapAlignClass, ScrollSnapAlignClassArr, ScrollSnapAlignClassObj, ScrollSnapStopClass, ScrollSnapStopClassArr, ScrollSnapStopClassObj, ScrollSnapTypeClass, ScrollSnapTypeClassArr, ScrollSnapTypeClassObj, SepiaClass, SepiaClassArr, SepiaClassObj, SkewClass, SkewClassArr, SkewClassObj, Style, TextAlignClass, TextAlignClassArr, TextAlignClassObj, TextColorClass, TextColorClassArr, TextColorClassObj, TextDecorationClass, TextDecorationClassArr, TextDecorationClassObj, TextDecorationColorClass, TextDecorationColorClassArr, TextDecorationColorClassObj, TextDecorationStyleClass, TextDecorationStyleClassArr, TextDecorationStyleClassObj, TextDecorationThicknessClass, TextDecorationThicknessClassArr, TextDecorationThicknessClassObj, TextLetterSpacingClass, TextLetterSpacingClassArr, TextLetterSpacingClassObj, TextLineClampClass, TextLineClampClassArr, TextLineClampClassObj, TextOverflowClass, TextOverflowClassArr, TextOverflowClassObj, TextTransformClass, TextTransformClassArr, TextTransformClassObj, TextUnderlineOffsetClass, TextUnderlineOffsetClassArr, TextUnderlineOffsetClassObj, ThemeAppAppearanceProps, ThemeAppColor, ThemeAppColorArr, ThemeAppColorMode, ThemeAppColorObj, ThemeAppearanceProps, ThemeAspectRatio, ThemeAspectRatioArr, ThemeAspectRatioObj, ThemeBlurClass, ThemeBlurClassArr, ThemeBlurClassObj, ThemeBorderWidth, ThemeBorderWidthArr, ThemeBorderWidthObj, ThemeBreakpoint, ThemeBreakpointArr, ThemeBreakpointObj, ThemeColor, ThemeColorArr, ThemeColorHue, ThemeColorHueArr, ThemeColorHueObj, ThemeColorMode, ThemeColorModeArr, ThemeColorModeObj, ThemeColorObj, ThemeColorOpacityObj, ThemeDelay, ThemeDelayArr, ThemeDelayObj, ThemeDuration, ThemeDurationArr, ThemeDurationObj, ThemeEase, ThemeEaseArr, ThemeEaseObj, ThemeFontSize, ThemeFontSizeArr, ThemeFontSizeObj, ThemeFontWeight, ThemeFontWeightArr, ThemeFontWeightObj, ThemeLineHeight, ThemeLineHeightArr, ThemeLineHeightObj, ThemeRadius, ThemeRadiusArr, ThemeRadiusObj, ThemeSpacing, ThemeSpacingArr, ThemeSpacingObj, ThemeStrokeWidth, ThemeStrokeWidthArr, ThemeStrokeWidthObj, TransformOriginClass, TransformOriginClassArr, TransformOriginClassObj, Undefinable, UserSelectClass, UserSelectClassArr, UserSelectClassObj, WhitespaceClass, WhitespaceClassArr, WhitespaceClassObj, WidthClass, WidthClassArr, WidthClassObj, WillChangeClass, WillChangeClassArr, WillChangeClassObj, WordBreakClass, WordBreakClassArr, WordBreakClassObj, ZIndexClass, ZIndexClassArr, ZIndexClassObj } from './common/types';
import * as common_utils from './common/utils';
import type { AnimatePresenceProps, TransitionDelay, TransitionDuration, TransitionKey, TransitionOtherProps, TransitionProps, TransitionRef, TransitionVariant, TransitionVariantKey, TransitionVariants } from './components/Animation';
import { AnimatePresence, Transition } from './components/Animation';
import type { BoxHeight, BoxMaxHeight, BoxMaxWidth, BoxMinHeight, BoxMinWidth, BoxOtherProps, BoxProps, BoxRef, BoxWidth } from './components/Box';
import { Box } from './components/Box';
import type { ButtonContext, ButtonDefaultElement, ButtonElement, ButtonGroupContext, ButtonGroupItemProps, ButtonGroupItemRef, ButtonGroupProps, ButtonGroupRef, ButtonIconDefaultElement, ButtonIconElement, ButtonIconProps, ButtonIconRef, ButtonMouseEvent, ButtonProps, ButtonRef, ButtonRenderProps, ButtonSize, ButtonSpinnerProps, ButtonSpinnerRef, ButtonVariant, ClearIconButtonDefaultElement, ClearIconButtonElement, ClearIconButtonProps, ClearIconButtonRef, CloseIconButtonDefaultElement, CloseIconButtonElement, CloseIconButtonProps, CloseIconButtonRef, CopyButtonChildrenProps, CopyButtonProps, CopyButtonTimeout, DeleteIconButtonDefaultElement, DeleteIconButtonElement, DeleteIconButtonProps, DeleteIconButtonRef, DummyButtonContext, DummyButtonIconDefaultElement, DummyButtonIconElement, DummyButtonIconProps, DummyButtonIconRef, DummyButtonProps, DummyButtonRef, DummyButtonRenderProps, DummyButtonSize, DummyButtonSkeletonProps, DummyButtonSkeletonRef, DummyButtonVariant, DummyIconButtonContext, DummyIconButtonIconDefaultElement, DummyIconButtonIconElement, DummyIconButtonIconProps, DummyIconButtonIconRef, DummyIconButtonProps, DummyIconButtonRef, DummyIconButtonSize, DummyIconButtonSkeletonProps, DummyIconButtonSkeletonRef, DummyIconButtonVariant, FileButtonBlob, FileButtonBlobs, FileButtonChangeEvent, FileButtonChildrenProps, FileButtonError, FileButtonErrors, FileButtonMouseEvent, FileButtonProps, IconButtonContext, IconButtonDefaultElement, IconButtonElement, IconButtonGroupContext, IconButtonGroupItemProps, IconButtonGroupItemRef, IconButtonGroupProps, IconButtonGroupRef, IconButtonIconDefaultElement, IconButtonIconElement, IconButtonIconProps, IconButtonIconRef, IconButtonMouseEvent, IconButtonProps, IconButtonRef, IconButtonRenderProps, IconButtonSize, IconButtonSpinnerProps, IconButtonSpinnerRef, IconButtonVariant, LinkDefaultElement, LinkElement, LinkMouseEvent, LinkProps, LinkRef, ScrollToTopIconButtonDefaultElement, ScrollToTopIconButtonElement, ScrollToTopIconButtonMouseEvent, ScrollToTopIconButtonProps, ScrollToTopIconButtonRef } from './components/Buttons';
import { Button, ButtonGroup, ButtonGroupItem, ButtonIcon, ButtonSpinner, ClearIconButton, CloseIconButton, CopyButton, DeleteIconButton, DummyButton, DummyButtonIcon, DummyButtonSkeleton, DummyIconButton, DummyIconButtonIcon, DummyIconButtonSkeleton, FileButton, IconButton, IconButtonGroup, IconButtonGroupItem, IconButtonIcon, IconButtonSpinner, Link, ScrollToTopIconButton } from './components/Buttons';
import type { BackgroundImageFilters, BackgroundImageOptions, BackgroundImageProps, BackgroundImageRef, BadgeCloseIconButtonDefaultElement, BadgeCloseIconButtonElement, BadgeCloseIconButtonProps, BadgeCloseIconButtonRef, BadgeContext, BadgeIconDefaultElement, BadgeIconElement, BadgeIconProps, BadgeIconRef, BadgeProps, BadgeRef, BadgeRenderProps, BadgeSize, BadgeVariant, CardBodyProps, CardBodyRef, CardContext, CardDividerDefaultElement, CardDividerElement, CardDividerProps, CardDividerRef, CardFooterProps, CardFooterRef, CardHeaderProps, CardHeaderRef, CardHeaderRenderProps, CardMouseEvent, CardProps, CardRef, CardStackProps, CardStackRef, CardSubtitleDefaultElement, CardSubtitleElement, CardSubtitleProps, CardSubtitleRef, CardTitleDefaultElement, CardTitleElement, CardTitleProps, CardTitleRef, CardVariant, CarouselArrowButtonDefaultElement, CarouselArrowButtonElement, CarouselArrowButtonGroupProps, CarouselArrowButtonGroupRef, CarouselArrowButtonMouseEvent, CarouselArrowButtonProps, CarouselArrowButtonRef, CarouselArrowDirection, CarouselArrowIconButtonDefaultElement, CarouselArrowIconButtonElement, CarouselArrowIconButtonGroupProps, CarouselArrowIconButtonGroupRef, CarouselArrowIconButtonMouseEvent, CarouselArrowIconButtonProps, CarouselArrowIconButtonRef, CarouselContext, CarouselDotProps, CarouselDotRef, CarouselDotsProps, CarouselDotsRef, CarouselDotsType, CarouselDotType, CarouselItem, CarouselItems, CarouselLeftArrowButtonDefaultElement, CarouselLeftArrowButtonElement, CarouselLeftArrowButtonProps, CarouselLeftArrowButtonRef, CarouselLeftArrowIconButtonDefaultElement, CarouselLeftArrowIconButtonElement, CarouselLeftArrowIconButtonProps, CarouselLeftArrowIconButtonRef, CarouselLeftLinearGradientProps, CarouselLeftLinearGradientRef, CarouselLinearGradientProps, CarouselLinearGradientRef, CarouselOrientation, CarouselOverlayArrowButtonDefaultElement, CarouselOverlayArrowButtonElement, CarouselOverlayArrowButtonProps, CarouselOverlayArrowButtonRef, CarouselOverlayArrowIconButtonDefaultElement, CarouselOverlayArrowIconButtonElement, CarouselOverlayArrowIconButtonProps, CarouselOverlayArrowIconButtonRef, CarouselOverlayLeftArrowButtonDefaultElement, CarouselOverlayLeftArrowButtonElement, CarouselOverlayLeftArrowButtonProps, CarouselOverlayLeftArrowButtonRef, CarouselOverlayLeftArrowIconButtonDefaultElement, CarouselOverlayLeftArrowIconButtonElement, CarouselOverlayLeftArrowIconButtonProps, CarouselOverlayLeftArrowIconButtonRef, CarouselOverlayRightArrowButtonDefaultElement, CarouselOverlayRightArrowButtonElement, CarouselOverlayRightArrowButtonProps, CarouselOverlayRightArrowButtonRef, CarouselOverlayRightArrowIconButtonDefaultElement, CarouselOverlayRightArrowIconButtonElement, CarouselOverlayRightArrowIconButtonProps, CarouselOverlayRightArrowIconButtonRef, CarouselProps, CarouselRef, CarouselRenderIconButtonProps, CarouselRightArrowButtonDefaultElement, CarouselRightArrowButtonElement, CarouselRightArrowButtonProps, CarouselRightArrowButtonRef, CarouselRightArrowIconButtonDefaultElement, CarouselRightArrowIconButtonElement, CarouselRightArrowIconButtonProps, CarouselRightArrowIconButtonRef, CarouselRightLinearGradientProps, CarouselRightLinearGradientRef, CarouselScrollAmount, CarouselVariant, DividerDefaultElement, DividerElement, DividerPlacement, DividerProps, DividerRef, DividerVariant, DummyBadgeContext, DummyBadgeIconDefaultElement, DummyBadgeIconElement, DummyBadgeIconProps, DummyBadgeIconRef, DummyBadgeProps, DummyBadgeRef, DummyBadgeRenderProps, DummyBadgeSize, DummyBadgeSkeletonProps, DummyBadgeSkeletonRef, DummyBadgeVariant, HeadlineProps, HeadlineRef, HeadlineRenderProps, IconCategory, IconDefaultElement, IconElement, IconProps, IconRef, IconVariant, ImageFilters, ImageMode, ImageModes, ImageOptions, ImageProps, ImageRef, ImageSyntheticEvent, ImageType, MessageActionsChildrenProps, MessageActionsProps, MessageActionsRef, MessageBodyProps, MessageBodyRef, MessageContext, MessageIconDefaultElement, MessageIconElement, MessageIconProps, MessageIconRef, MessageProps, MessageRef, MessageStackProps, MessageStackRef, MessageSubtitleDefaultElement, MessageSubtitleElement, MessageSubtitleProps, MessageSubtitleRef, MessageTitleDefaultElement, MessageTitleElement, MessageTitleProps, MessageTitleRef, MessageVariant } from './components/DataDisplay';
import { BackgroundImage, Badge, BadgeCloseIconButton, BadgeIcon, CardBody, CardDivider, CardFooter, CardHeader, CardStack, CardSubtitle, CardTitle, Carousel, CarouselArrowButton, CarouselArrowButtonGroup, CarouselArrowIconButton, CarouselArrowIconButtonGroup, CarouselDots, CarouselLeftArrowButton, CarouselLeftArrowIconButton, CarouselLeftLinearGradient, CarouselLinearGradient, CarouselOverlayArrowButton, CarouselOverlayArrowIconButton, CarouselOverlayLeftArrowButton, CarouselOverlayLeftArrowIconButton, CarouselOverlayRightArrowButton, CarouselOverlayRightArrowIconButton, CarouselRightArrowButton, CarouselRightArrowIconButton, CarouselRightLinearGradient, Divider, DummyBadge, DummyBadgeIcon, DummyBadgeSkeleton, Headline, Icon, Image, Message, MessageActions, MessageBody, MessageIcon, MessageStack, MessageSubtitle, MessageTitle } from './components/DataDisplay';
import type { AlertContext, AlertDescriptionDefaultElement, AlertDescriptionElement, AlertDescriptionProps, AlertDescriptionRef, AlertDuration, AlertIconDefaultElement, AlertIconElement, AlertIconProps, AlertIconRef, AlertLabelDefaultElement, AlertLabelElement, AlertLabelProps, AlertLabelRef, AlertProps, AlertRef, AlertRenderActionsProps, AlertRenderCloseProps, AlertStatus, AlertVariant, ProgressContext, ProgressLabelDefaultElement, ProgressLabelElement, ProgressLabelProps, ProgressLabelRef, ProgressProps, ProgressRef, ProgressSectionProps, ProgressSectionRef, SkeletonProps, SkeletonRef, SpinnerBarsVariant, SpinnerColorRingVariant, SpinnerOvalVariant, SpinnerProps, SpinnerPuffVariant, SpinnerRef, SpinnerRingsVariant, SpinnerRotatingLinesVariant, SpinnerSize, SpinnerTailSpinVariant, SpinnerThreeDotsVariant, SpinnerVariant } from './components/Feedback';
import { Alert, AlertDescription, AlertIcon, AlertLabel, Progress, ProgressLabel, ProgressSection, Skeleton, Spinner } from './components/Feedback';
import type { CheckboxChangeEvent, CheckboxFocusEvent, CheckboxLabelPosition, CheckboxMouseEvent, CheckboxProps, CheckboxRef, CheckboxSize, EmailInputChangeEvent, EmailInputDefaultElement, EmailInputElement, EmailInputFocusEvent, EmailInputMouseEvent, EmailInputProps, EmailInputRef, EmailInputRenderProps, EmailInputSize, EmailInputVariant, FileInputBlob, FileInputBlobs, FileInputChangeEvent, FileInputDefaultElement, FileInputElement, FileInputError, FileInputErrors, FileInputFocusEvent, FileInputMouseEvent, FileInputProps, FileInputRef, FileInputRenderProps, FileInputSize, FileInputVariant, FormControlContext, FormControlProps, FormControlRef, FormControlSize, FormDescriptionDefaultElement, FormDescriptionElement, FormDescriptionProps, FormDescriptionRef, FormHeaderProps, FormHeaderRef, FormHeaderRenderProps, FormHelperTextDefaultElement, FormHelperTextElement, FormHelperTextProps, FormHelperTextRef, FormLabelDefaultElement, FormLabelElement, FormLabelProps, FormLabelRef, FormProps, FormRef, FormsCommonProps, FormsCommonSize, FormsCommonVariant, NumberInputChangeEvent, NumberInputDefaultElement, NumberInputElement, NumberInputFocusEvent, NumberInputMouseEvent, NumberInputProps, NumberInputRef, NumberInputRenderControlsProps, NumberInputRenderProps, NumberInputSize, NumberInputVariant, PasswordInputChangeEvent, PasswordInputDefaultElement, PasswordInputElement, PasswordInputFocusEvent, PasswordInputMouseEvent, PasswordInputProps, PasswordInputRef, PasswordInputRenderProps, PasswordInputSize, PasswordInputVariant, RadioChangeEvent, RadioFocusEvent, RadioLabelPosition, RadioMouseEvent, RadioProps, RadioRef, RadioSize, RatingDirection, RatingIcons, RatingProps, RatingRef, RatingSize, SearchInputChangeEvent, SearchInputDefaultElement, SearchInputElement, SearchInputFocusEvent, SearchInputMouseEvent, SearchInputProps, SearchInputRef, SearchInputRenderProps, SearchInputSize, SearchInputVariant, SwitchChangeEvent, SwitchFocusEvent, SwitchLabelPosition, SwitchMouseEvent, SwitchProps, SwitchRef, SwitchSize, TextareaChangeEvent, TextareaDefaultElement, TextareaElement, TextareaFocusEvent, TextareaMouseEvent, TextareaProps, TextareaRef, TextareaRenderProps, TextareaSize, TextareaVariant, TextInputChangeEvent, TextInputDefaultElement, TextInputElement, TextInputFocusEvent, TextInputMouseEvent, TextInputProps, TextInputRef, TextInputRenderProps, TextInputSize, TextInputVariant } from './components/Forms';
import { Checkbox, EmailInput, FileInput, Form, FormControl, FormDescription, FormHeader, FormHelperText, FormLabel, NumberInput, PasswordInput, Radio, Rating, SearchInput, Switch, Textarea, TextInput } from './components/Forms';
import type { AspectRatioProps, AspectRatioRef, CenterProps, CenterRef, ContainerBreakpoint, ContainerBreakpoints, ContainerProps, ContainerRef, GridItemProps, GridItemRef, GridProps, GridRef, HStackProps, HStackRef, SimpleGridColumn, SimpleGridColumns, SimpleGridProps, SimpleGridRef, SpaceProps, SpaceRef, StackProps, StackRef, VStackProps, VStackRef } from './components/Layout';
import { AspectRatio, Center, Container, Grid, GridItem, HStack, SimpleGrid, Space, Stack, VStack } from './components/Layout';
import type { ErrorBoundaryProps, SuspenseProps } from './components/Lazy';
import { ErrorBoundary, Suspense } from './components/Lazy';
import type { DummyTabIconDefaultElement, DummyTabIconElement, DummyTabIconProps, DummyTabIconRef, DummyTabListProps, DummyTabListRef, DummyTabListRenderProps, DummyTabPanelProps, DummyTabPanelsProps, DummyTabPanelsRef, DummyTabProps, DummyTabRef, DummyTabRenderProps, DummyTabsAlign, DummyTabsContext, DummyTabsOrientation, DummyTabsProps, DummyTabsRef, DummyTabsSize, TabDefaultElement, TabElement, TabIconDefaultElement, TabIconElement, TabIconProps, TabIconRef, TabListProps, TabListRef, TabListRenderProps, TabMouseEvent, TabPanelProps, TabPanelsProps, TabPanelsRef, TabProps, TabRef, TabRenderProps, TabsAlign, TabsContext, TabsOrientation, TabsProps, TabsRef, TabsSize } from './components/Navigation';
import { DummyTab, DummyTabIcon, DummyTabList, DummyTabPanels, DummyTabs, Tab, TabIcon, TabList, TabPanels, Tabs } from './components/Navigation';
import type { BackdropOverlayBlurType, BackdropOverlayBlurTypes, BackdropOverlayProps, BackdropOverlayRef, ConfirmModalActionsProps, ConfirmModalActionsRef, ConfirmModalActionsRenderActionProps, ConfirmModalActionsRenderCancelProps, ConfirmModalBackdropProps, ConfirmModalBackdropRef, ConfirmModalBodyProps, ConfirmModalBodyRef, ConfirmModalContext, ConfirmModalDefaultElement, ConfirmModalElement, ConfirmModalIconDefaultElement, ConfirmModalIconElement, ConfirmModalIconProps, ConfirmModalIconRef, ConfirmModalProps, ConfirmModalRef, ConfirmModalRenderBackdropProps, ConfirmModalRenderCancelProps, ConfirmModalRenderTriggerProps, ConfirmModalSize, ConfirmModalStackProps, ConfirmModalStackRef, ConfirmModalSubtitleDefaultElement, ConfirmModalSubtitleElement, ConfirmModalSubtitleProps, ConfirmModalSubtitleRef, ConfirmModalTitleDefaultElement, ConfirmModalTitleElement, ConfirmModalTitleProps, ConfirmModalTitleRef, DummyPushableOverlayProps, DummyPushableOverlayRef, DummyPushableOverlayVariant, GlassOverlayBlurType, GlassOverlayBlurTypes, GlassOverlayProps, GlassOverlayRef, HoverOverlayMouseEvent, HoverOverlayProps, HoverOverlayRef, IndicatorPlacement, IndicatorPlacements, IndicatorProps, IndicatorRef, LinearGradientColor, LinearGradientDirection, LinearGradientDirections, LinearGradientProps, LinearGradientRef, LoadingOverlayBlurType, LoadingOverlayBlurTypes, LoadingOverlayProps, LoadingOverlayRef, ModalBackdropProps, ModalBackdropRef, ModalBodyProps, ModalBodyRef, ModalContext, ModalDefaultElement, ModalElement, ModalFooterProps, ModalFooterRef, ModalFooterRenderActionProps, ModalFooterRenderCancelProps, ModalHeaderProps, ModalHeaderRef, ModalHeaderRenderCancelProps, ModalProps, ModalRef, ModalRenderBackdropProps, ModalRenderTriggerProps, ModalSize, ModalStackProps, ModalStackRef, ModalSubtitleDefaultElement, ModalSubtitleElement, ModalSubtitleProps, ModalSubtitleRef, ModalTitleDefaultElement, ModalTitleElement, ModalTitleProps, ModalTitleRef, PopperPlacement, PopperProps, PopperRef, PositionOverlayBlurType, PositionOverlayBlurTypes, PositionOverlayPlacement, PositionOverlayPlacements, PositionOverlayProps, PositionOverlayRef, PushableOverlayProps, PushableOverlayRef, PushableOverlayVariant, StateOverlayProps, StateOverlayRef, StateOverlayState, TooltipPlacement, TooltipProps, TooltipRef } from './components/Overlay';
import { BackdropOverlay, ConfirmModal, DummyPushableOverlay, GlassOverlay, HoverOverlay, Indicator, LinearGradient, LoadingOverlay, Modal, Popper, PositionOverlay, PushableOverlay, StateOverlay, Tooltip } from './components/Overlay';
import type { AnimationContext, IconFontContext, ProviderContext, ProviderProps } from './components/Provider';
import { Provider } from './components/Provider';
import type { TextDefaultElement, TextElement, TextProps, TextRef, TextThemeAppearanceProps } from './components/Typography';
import { Text } from './components/Typography';
import type { VisuallyHiddenDefaultElement, VisuallyHiddenElement, VisuallyHiddenProps, VisuallyHiddenRef } from './components/VisuallyHidden';
import { VisuallyHidden } from './components/VisuallyHidden';
export * as classes from './common/classes';
export declare const constants: {
    __DEFAULT_TEXT_ALIGN__: TextAlignClass;
    __DEFAULT_TEXT_FONT_SIZE__: ThemeFontSize;
    __DEFAULT_TEXT_FONT_WEIGHT__: ThemeFontWeight;
    __DEFAULT_TEXT_IS_ITALIC__: false;
    __DEFAULT_TEXT_IS_OVERFLOWN__: false;
    __DEFAULT_TEXT_LINE_HEIGHT__: ThemeLineHeight;
    __DEFAULT_TEXT_TRANSFORM__: TextTransformClass;
    __DEFAULT_TEXT_WHITESPACE__: WhitespaceClass;
    __DEFAULT_TEXT_WORD_BREAK__: WordBreakClass;
    __DEFAULT_TOOLTIP_CLOSE_DELAY__: 0;
    __DEFAULT_TOOLTIP_CLOSE_ON_CLICK__: true;
    __DEFAULT_TOOLTIP_CLOSE_ON_ESC__: true;
    __DEFAULT_TOOLTIP_GUTTER__: 8;
    __DEFAULT_TOOLTIP_IS_DISABLED__: false;
    __DEFAULT_TOOLTIP_IS_OPEN__: false;
    __DEFAULT_TOOLTIP_LABEL__: "";
    __DEFAULT_TOOLTIP_OPEN_DELAY__: 0;
    __DEFAULT_TOOLTIP_PLACEMENT__: TooltipPlacement;
    __DEFAULT_STATE_OVERLAY_HAS_GLASS__: false;
    __DEFAULT_STATE_OVERLAY_IS_ALWAYS_VISIBLE__: false;
    __DEFAULT_STATE_OVERLAY_STATE__: StateOverlayState;
    __DEFAULT_PUSHABLE_OVERLAY_IS_ACTIVE__: false;
    __DEFAULT_PUSHABLE_OVERLAY_IS_DISABLED__: false;
    __DEFAULT_PUSHABLE_OVERLAY_IS_FIXED__: false;
    __DEFAULT_PUSHABLE_OVERLAY_IS_FOCUSED__: false;
    __DEFAULT_PUSHABLE_OVERLAY_IS_OUTLINED__: false;
    __DEFAULT_PUSHABLE_OVERLAY_IS_PUSHABLE__: true;
    __DEFAULT_PUSHABLE_OVERLAY_TRANSFORM_SIZE__: Record<"base" | "active" | "hover" | "pushable", ThemeBorderWidth>;
    __DEFAULT_PUSHABLE_OVERLAY_VARIANT__: PushableOverlayVariant;
    __DEFAULT_POSITION_OVERLAY_BACKDROP_AMOUNT__: 0.5;
    __DEFAULT_POSITION_OVERLAY_BLUR__: ThemeBlurClass;
    __DEFAULT_POSITION_OVERLAY_BLUR_TYPE__: PositionOverlayBlurType;
    __DEFAULT_POSITION_OVERLAY_HAS_BACKGROUND__: true;
    __DEFAULT_POSITION_OVERLAY_HAS_GLASS__: true;
    __DEFAULT_POSITION_OVERLAY_IS_VISIBLE__: false;
    __DEFAULT_POSITION_OVERLAY_PLACEMENT__: PositionOverlayPlacement;
    __DEFAULT_POSITION_OVERLAY_RADIUS__: ThemeRadius;
    __DEFAULT_POPPER_CLOSE_DELAY__: 0;
    __DEFAULT_POPPER_CLOSE_ON_CLICK_OUTSIDE__: true;
    __DEFAULT_POPPER_CLOSE_ON_ESC__: true;
    __DEFAULT_POPPER_GUTTER__: 8;
    __DEFAULT_POPPER_IS_DISABLED__: false;
    __DEFAULT_POPPER_IS_OPEN__: false;
    __DEFAULT_POPPER_OPEN_DELAY__: 0;
    __DEFAULT_POPPER_PLACEMENT__: PopperPlacement;
    __DEFAULT_MODAL_CLOSE_ON_ESC__: true;
    __DEFAULT_MODAL_CLOSE_ON_OVERLAY_CLICK__: true;
    __DEFAULT_MODAL_HAS_BACKDROP__: true;
    __DEFAULT_MODAL_ID__: string;
    __DEFAULT_MODAL_IS_OPEN__: false;
    __DEFAULT_MODAL_SIZE__: ModalSize;
    __DEFAULT_LOADING_OVERLAY_BACKDROP_AMOUNT__: 0.5;
    __DEFAULT_LOADING_OVERLAY_BLUR__: ThemeBlurClass;
    __DEFAULT_LOADING_OVERLAY_BLUR_TYPE__: LoadingOverlayBlurType;
    __DEFAULT_LOADING_OVERLAY_HAS_BACKGROUND__: true;
    __DEFAULT_LOADING_OVERLAY_HAS_GLASS__: true;
    __DEFAULT_LOADING_OVERLAY_IS_LOADING__: false;
    __DEFAULT_LOADING_OVERLAY_RADIUS__: ThemeRadius;
    __DEFAULT_LINEAR_GRADIENT_DIRECTION__: LinearGradientDirection;
    __DEFAULT_LINEAR_GRADIENT_FROM__: LinearGradientColor;
    __DEFAULT_LINEAR_GRADIENT_MIDDLE__: LinearGradientColor;
    __DEFAULT_LINEAR_GRADIENT_TO__: LinearGradientColor;
    __DEFAULT_INDICATOR_IS_VISIBLE__: false;
    __DEFAULT_INDICATOR_OFFSET__: 0;
    __DEFAULT_INDICATOR_PLACEMENT__: IndicatorPlacement;
    __DEFAULT_GLASS_OVERLAY_BACKDROP_AMOUNT__: 0.5;
    __DEFAULT_GLASS_OVERLAY_BLUR__: ThemeBlurClass;
    __DEFAULT_GLASS_OVERLAY_BLUR_TYPE__: GlassOverlayBlurType;
    __DEFAULT_GLASS_OVERLAY_HAS_BACKGROUND__: true;
    __DEFAULT_GLASS_OVERLAY_RADIUS__: ThemeRadius;
    __DEFAULT_DUMMY_PUSHABLE_OVERLAY_IS_ANIMATED__: true;
    __DEFAULT_DUMMY_PUSHABLE_OVERLAY_IS_OUTLINED__: false;
    __DEFAULT_DUMMY_PUSHABLE_OVERLAY_VARIANT__: DummyPushableOverlayVariant;
    __DEFAULT_CONFIRM_MODAL_BODY_SPACING__: ThemeSpacing;
    __DEFAULT_CONFIRM_MODAL_CLOSE_ON_ESC__: true;
    __DEFAULT_CONFIRM_MODAL_CLOSE_ON_OVERLAY_CLICK__: true;
    __DEFAULT_CONFIRM_MODAL_HAS_BACKDROP__: true;
    __DEFAULT_CONFIRM_MODAL_ID__: string;
    __DEFAULT_CONFIRM_MODAL_IS_OPEN__: false;
    __DEFAULT_CONFIRM_MODAL_SIZE__: ConfirmModalSize;
    __DEFAULT_CONFIRM_MODAL_SPACING__: ThemeSpacing;
    __DEFAULT_BACKDROP_OVERLAY_AMOUNT__: 0.5;
    __DEFAULT_BACKDROP_OVERLAY_BLUR__: ThemeBlurClass;
    __DEFAULT_BACKDROP_OVERLAY_BLUR_TYPE__: BackdropOverlayBlurType;
    __DEFAULT_BACKDROP_OVERLAY_RADIUS__: ThemeRadius;
    __DEFAULT_TAB_BORDER_WIDTH__: ThemeBorderWidth;
    __DEFAULT_TAB_IS_ACTIVE__: false;
    __DEFAULT_TAB_IS_COMPACT__: false;
    __DEFAULT_TAB_IS_DISABLED__: false;
    __DEFAULT_TAB_IS_UPPERCASE__: false;
    __DEFAULT_TABS_ALIGN__: TabsAlign;
    __DEFAULT_TABS_ID__: string;
    __DEFAULT_TABS_INDEX__: 0;
    __DEFAULT_TABS_IS_DISABLED__: false;
    __DEFAULT_TABS_IS_FITTED__: false;
    __DEFAULT_TABS_ORIENTATION__: TabsOrientation;
    __DEFAULT_TABS_SIZE__: TabsSize;
    __DEFAULT_TABS_TAB_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_STEP_BORDER_WIDTH__: ThemeBorderWidth;
    __DEFAULT_STEP_INDEX__: -1;
    __DEFAULT_STEP_IS_ACTIVE__: false;
    __DEFAULT_STEP_IS_COMPACT__: false;
    __DEFAULT_STEP_IS_DISABLED__: false;
    __DEFAULT_STEP_IS_UPPERCASE__: false;
    __DEFAULT_STEP_STATUS__: import("./components/Navigation/components/Stepper/components/Step/common/types").StepStatus;
    __DEFAULT_STEPPER_ALIGN__: import("./components/Navigation").StepperAlign;
    __DEFAULT_STEPPER_ID__: string;
    __DEFAULT_STEPPER_INDEX__: 0;
    __DEFAULT_STEPPER_IS_CONSECUTIVELY__: false;
    __DEFAULT_STEPPER_IS_DISABLED__: false;
    __DEFAULT_STEPPER_IS_FITTED__: false;
    __DEFAULT_STEPPER_ORIENTATION__: import("./components/Navigation").StepperOrientation;
    __DEFAULT_STEPPER_SIZE__: import("./components/Navigation").StepperSize;
    __DEFAULT_STEPPER_STEP_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_STEPPER_TOTAL__: 0;
    __DEFAULT_STEPPER_VARIANT__: import("./components/Navigation/components/Stepper/common/types").StepperVariant;
    __DEFAULT_DUMMY_TAB_BORDER_WIDTH__: ThemeBorderWidth;
    __DEFAULT_DUMMY_TAB_IS_COMPACT__: false;
    __DEFAULT_DUMMY_TAB_IS_UPPERCASE__: false;
    __DEFAULT_DUMMY_TABS_ALIGN__: DummyTabsAlign;
    __DEFAULT_DUMMY_TABS_ID__: string;
    __DEFAULT_DUMMY_TABS_INDEX__: 0;
    __DEFAULT_DUMMY_TABS_IS_ANIMATED__: true;
    __DEFAULT_DUMMY_TABS_IS_FITTED__: false;
    __DEFAULT_DUMMY_TABS_ORIENTATION__: DummyTabsOrientation;
    __DEFAULT_DUMMY_TABS_SIZE__: DummyTabsSize;
    __DEFAULT_DUMMY_TABS_TAB_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_STACK_ALIGN_ITEMS__: AlignItemsClass;
    __DEFAULT_STACK_DIRECTION__: FlexDirectionClass;
    __DEFAULT_STACK_JUSTIFY_CONTENT__: JustifyContentClass;
    __DEFAULT_STACK_WRAP__: FlexWrapClass;
    __DEFAULT_SPACE_HEIGHT__: ThemeSpacing;
    __DEFAULT_SPACE_WIDTH__: ThemeSpacing;
    __DEFAULT_GRID_ITEM_ALIGN_SELF__: AlignSelfClass;
    __DEFAULT_GRID_ITEM_JUSTIFY_SELF__: JustifySelfClass;
    __DEFAULT_GRID_ITEM_Z_INDEX__: ZIndexClass;
    __DEFAULT_GRID_ALIGN_CONTENT__: AlignContentClass;
    __DEFAULT_GRID_ALIGN_ITEMS__: AlignItemsClass;
    __DEFAULT_GRID_JUSTIFY_CONTENT__: JustifyContentClass;
    __DEFAULT_GRID_JUSTIFY_ITEMS__: JustifyItemsClass;
    __DEFAULT_GRID_TEMPLATE_COLUMNS__: GridTemplateColumnsClass;
    __DEFAULT_GRID_TEMPLATE_ROWS__: GridTemplateRowsClass;
    __DEFAULT_CONTAINER_BREAKPOINT__: ContainerBreakpoint;
    __DEFAULT_CONTAINER_IS_CONTENT_CENTERED__: true;
    __DEFAULT_CONTAINER_IS_FLUID__: false;
    __DEFAULT_ASPECT_RATIO_RATIO__: ThemeAspectRatio;
    __DEFAULT_SWITCH_HAS_IO_LABEL__: true;
    __DEFAULT_SWITCH_ID__: string;
    __DEFAULT_SWITCH_IS_ACTIVE__: false;
    __DEFAULT_SWITCH_IS_CHECKED__: false;
    __DEFAULT_SWITCH_IS_CLICKABLE__: true;
    __DEFAULT_SWITCH_IS_COMPACT__: false;
    __DEFAULT_SWITCH_IS_DISABLED__: false;
    __DEFAULT_SWITCH_IS_ERROR__: false;
    __DEFAULT_SWITCH_IS_FOCUSED__: false;
    __DEFAULT_SWITCH_IS_OUTLINED__: false;
    __DEFAULT_SWITCH_IS_READONLY__: false;
    __DEFAULT_SWITCH_IS_REQUIRED__: false;
    __DEFAULT_SWITCH_IS_SUCCESS__: false;
    __DEFAULT_SWITCH_IS_WARNING__: false;
    __DEFAULT_SWITCH_LABEL_POSITION__: SwitchLabelPosition;
    __DEFAULT_SWITCH_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_SWITCH_SIZE__: FormsCommonSize;
    __DEFAULT_SWITCH_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_SEARCH_INPUT_ID__: string;
    __DEFAULT_SEARCH_INPUT_INITIAL_QUERY__: "";
    __DEFAULT_SEARCH_INPUT_IS_COMPACT__: false;
    __DEFAULT_SEARCH_INPUT_IS_DISABLED__: false;
    __DEFAULT_SEARCH_INPUT_IS_ERROR__: false;
    __DEFAULT_SEARCH_INPUT_IS_FOCUSED__: false;
    __DEFAULT_SEARCH_INPUT_IS_OUTLINED__: false;
    __DEFAULT_SEARCH_INPUT_IS_READONLY__: false;
    __DEFAULT_SEARCH_INPUT_IS_REQUIRED__: false;
    __DEFAULT_SEARCH_INPUT_IS_SUCCESS__: false;
    __DEFAULT_SEARCH_INPUT_IS_WARNING__: false;
    __DEFAULT_SEARCH_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_SEARCH_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_SEARCH_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_RATING_COUNT__: 10;
    __DEFAULT_RATING_DIRECTION__: RatingDirection;
    __DEFAULT_RATING_HIGHLIGHT_MODE__: import("./components/Forms/components/Rating/common/types").RatingHighlightMode;
    __DEFAULT_RATING_ICONS__: RatingIcons;
    __DEFAULT_RATING_ID__: string;
    __DEFAULT_RATING_IS_DISABLED__: false;
    __DEFAULT_RATING_IS_ERROR__: false;
    __DEFAULT_RATING_IS_READONLY__: false;
    __DEFAULT_RATING_IS_REQUIRED__: false;
    __DEFAULT_RATING_IS_SUCCESS__: false;
    __DEFAULT_RATING_IS_WARNING__: false;
    __DEFAULT_RATING_SIZE__: FormsCommonSize;
    __DEFAULT_RADIO_ID__: string;
    __DEFAULT_RADIO_IS_ACTIVE__: false;
    __DEFAULT_RADIO_IS_CHECKED__: false;
    __DEFAULT_RADIO_IS_CLICKABLE__: true;
    __DEFAULT_RADIO_IS_COMPACT__: false;
    __DEFAULT_RADIO_IS_DISABLED__: false;
    __DEFAULT_RADIO_IS_ERROR__: false;
    __DEFAULT_RADIO_IS_FOCUSED__: false;
    __DEFAULT_RADIO_IS_OUTLINED__: false;
    __DEFAULT_RADIO_IS_READONLY__: false;
    __DEFAULT_RADIO_IS_REQUIRED__: false;
    __DEFAULT_RADIO_IS_SUCCESS__: false;
    __DEFAULT_RADIO_IS_WARNING__: false;
    __DEFAULT_RADIO_LABEL_POSITION__: RadioLabelPosition;
    __DEFAULT_RADIO_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_RADIO_SIZE__: FormsCommonSize;
    __DEFAULT_RADIO_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_PASSWORD_INPUT_ID__: string;
    __DEFAULT_PASSWORD_INPUT_IS_COMPACT__: false;
    __DEFAULT_PASSWORD_INPUT_IS_DISABLED__: false;
    __DEFAULT_PASSWORD_INPUT_IS_ERROR__: false;
    __DEFAULT_PASSWORD_INPUT_IS_FOCUSED__: false;
    __DEFAULT_PASSWORD_INPUT_IS_OUTLINED__: false;
    __DEFAULT_PASSWORD_INPUT_IS_READONLY__: false;
    __DEFAULT_PASSWORD_INPUT_IS_REQUIRED__: false;
    __DEFAULT_PASSWORD_INPUT_IS_SUCCESS__: false;
    __DEFAULT_PASSWORD_INPUT_IS_WARNING__: false;
    __DEFAULT_PASSWORD_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_PASSWORD_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_PASSWORD_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_FILE_INPUT_ACCEPT__: "image/*";
    __DEFAULT_FILE_INPUT_DURATION__: ThemeDuration;
    __DEFAULT_FILE_INPUT_ID__: string;
    __DEFAULT_FILE_INPUT_IS_COMPACT__: false;
    __DEFAULT_FILE_INPUT_IS_DISABLED__: false;
    __DEFAULT_FILE_INPUT_IS_ERROR__: false;
    __DEFAULT_FILE_INPUT_IS_FOCUSED__: false;
    __DEFAULT_FILE_INPUT_IS_MULTIPLE__: false;
    __DEFAULT_FILE_INPUT_IS_OUTLINED__: false;
    __DEFAULT_FILE_INPUT_IS_READONLY__: false;
    __DEFAULT_FILE_INPUT_IS_REQUIRED__: false;
    __DEFAULT_FILE_INPUT_IS_SUCCESS__: false;
    __DEFAULT_FILE_INPUT_IS_WARNING__: false;
    __DEFAULT_FILE_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_FILE_INPUT_TIMEOUT__: number;
    __DEFAULT_FILE_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_FILE_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_EMAIL_INPUT_ID__: string;
    __DEFAULT_EMAIL_INPUT_IS_COMPACT__: false;
    __DEFAULT_EMAIL_INPUT_IS_DISABLED__: false;
    __DEFAULT_EMAIL_INPUT_IS_ERROR__: false;
    __DEFAULT_EMAIL_INPUT_IS_FOCUSED__: false;
    __DEFAULT_EMAIL_INPUT_IS_OUTLINED__: false;
    __DEFAULT_EMAIL_INPUT_IS_READONLY__: false;
    __DEFAULT_EMAIL_INPUT_IS_REQUIRED__: false;
    __DEFAULT_EMAIL_INPUT_IS_SUCCESS__: false;
    __DEFAULT_EMAIL_INPUT_IS_WARNING__: false;
    __DEFAULT_EMAIL_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_EMAIL_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_EMAIL_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_CHECKBOX_ID__: string;
    __DEFAULT_CHECKBOX_IS_ACTIVE__: false;
    __DEFAULT_CHECKBOX_IS_CHECKED__: false;
    __DEFAULT_CHECKBOX_IS_CLICKABLE__: true;
    __DEFAULT_CHECKBOX_IS_COMPACT__: false;
    __DEFAULT_CHECKBOX_IS_DISABLED__: false;
    __DEFAULT_CHECKBOX_IS_ERROR__: false;
    __DEFAULT_CHECKBOX_IS_FOCUSED__: false;
    __DEFAULT_CHECKBOX_IS_INDETERMINATE__: false;
    __DEFAULT_CHECKBOX_IS_OUTLINED__: false;
    __DEFAULT_CHECKBOX_IS_READONLY__: false;
    __DEFAULT_CHECKBOX_IS_REQUIRED__: false;
    __DEFAULT_CHECKBOX_IS_SUCCESS__: false;
    __DEFAULT_CHECKBOX_IS_WARNING__: false;
    __DEFAULT_CHECKBOX_LABEL_POSITION__: CheckboxLabelPosition;
    __DEFAULT_CHECKBOX_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_CHECKBOX_SIZE__: FormsCommonSize;
    __DEFAULT_CHECKBOX_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_TEXT_INPUT_ID__: string;
    __DEFAULT_TEXT_INPUT_IS_COMPACT__: false;
    __DEFAULT_TEXT_INPUT_IS_DISABLED__: false;
    __DEFAULT_TEXT_INPUT_IS_ERROR__: false;
    __DEFAULT_TEXT_INPUT_IS_FOCUSED__: false;
    __DEFAULT_TEXT_INPUT_IS_OUTLINED__: false;
    __DEFAULT_TEXT_INPUT_IS_READONLY__: false;
    __DEFAULT_TEXT_INPUT_IS_REQUIRED__: false;
    __DEFAULT_TEXT_INPUT_IS_SUCCESS__: false;
    __DEFAULT_TEXT_INPUT_IS_WARNING__: false;
    __DEFAULT_TEXT_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_TEXT_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_TEXT_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_TEXTAREA_ID__: string;
    __DEFAULT_TEXTAREA_IS_COMPACT__: false;
    __DEFAULT_TEXTAREA_IS_DISABLED__: false;
    __DEFAULT_TEXTAREA_IS_ERROR__: false;
    __DEFAULT_TEXTAREA_IS_FOCUSED__: false;
    __DEFAULT_TEXTAREA_IS_OUTLINED__: false;
    __DEFAULT_TEXTAREA_IS_READONLY__: false;
    __DEFAULT_TEXTAREA_IS_REQUIRED__: false;
    __DEFAULT_TEXTAREA_IS_SUCCESS__: false;
    __DEFAULT_TEXTAREA_IS_WARNING__: false;
    __DEFAULT_TEXTAREA_RESIZE__: ResizeClass;
    __DEFAULT_TEXTAREA_SIZE__: FormsCommonSize;
    __DEFAULT_TEXTAREA_VARIANT__: FormsCommonVariant;
    __DEFAULT_NUMBER_INPUT_ID__: string;
    __DEFAULT_NUMBER_INPUT_IS_COMPACT__: false;
    __DEFAULT_NUMBER_INPUT_IS_DISABLED__: false;
    __DEFAULT_NUMBER_INPUT_IS_ERROR__: false;
    __DEFAULT_NUMBER_INPUT_IS_FOCUSED__: false;
    __DEFAULT_NUMBER_INPUT_IS_OUTLINED__: false;
    __DEFAULT_NUMBER_INPUT_IS_READONLY__: false;
    __DEFAULT_NUMBER_INPUT_IS_REQUIRED__: false;
    __DEFAULT_NUMBER_INPUT_IS_SUCCESS__: false;
    __DEFAULT_NUMBER_INPUT_IS_WARNING__: false;
    __DEFAULT_NUMBER_INPUT_SIZE__: FormsCommonSize;
    __DEFAULT_NUMBER_INPUT_START_VALUE__: 0;
    __DEFAULT_NUMBER_INPUT_STEP__: 1;
    __DEFAULT_NUMBER_INPUT_TYPE__: import("react").HTMLInputTypeAttribute | undefined;
    __DEFAULT_NUMBER_INPUT_VARIANT__: FormsCommonVariant;
    __DEFAULT_FORM_CONTROL_HAS_FORM_CONTROL__: true;
    __DEFAULT_FORM_CONTROL_ID__: string;
    __DEFAULT_FORM_CONTROL_IS_DISABLED__: false;
    __DEFAULT_FORM_CONTROL_IS_ERROR__: false;
    __DEFAULT_FORM_CONTROL_IS_FOCUSED__: false;
    __DEFAULT_FORM_CONTROL_IS_READONLY__: false;
    __DEFAULT_FORM_CONTROL_IS_REQUIRED__: false;
    __DEFAULT_FORM_CONTROL_IS_SUCCESS__: false;
    __DEFAULT_FORM_CONTROL_IS_WARNING__: false;
    __DEFAULT_FORM_CONTROL_SIZE__: FormsCommonSize;
    __DEFAULT_FORM_CONTROL_SPACING__: ThemeSpacing;
    __DEFAULT_FORMS_IS_COMPACT__: false;
    __DEFAULT_FORMS_IS_DISABLED__: false;
    __DEFAULT_FORMS_IS_ERROR__: false;
    __DEFAULT_FORMS_IS_FOCUSED__: false;
    __DEFAULT_FORMS_IS_OUTLINED__: false;
    __DEFAULT_FORMS_IS_READONLY__: false;
    __DEFAULT_FORMS_IS_REQUIRED__: false;
    __DEFAULT_FORMS_IS_SUCCESS__: false;
    __DEFAULT_FORMS_IS_WARNING__: false;
    __DEFAULT_FORMS_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_FORMS_SIZE__: FormsCommonSize;
    __DEFAULT_FORMS_VARIANT__: FormsCommonVariant;
    __DEFAULT_SKELETON_IS_ANIMATED__: true;
    __DEFAULT_SKELETON_IS_LOADED__: false;
    __DEFAULT_SPINNER_IS_VISIBLE__: true;
    __DEFAULT_SPINNER_SIZE__: SpinnerSize;
    __DEFAULT_SPINNER_VARIANT__: SpinnerVariant;
    __DEFAULT_PROGRESS_SECTION_VALUE__: 0;
    __DEFAULT_PROGRESS_IS_INDETERMINATE__: false;
    __DEFAULT_PROGRESS_MAX__: 100;
    __DEFAULT_PROGRESS_MIN__: 0;
    __DEFAULT_PROGRESS_VALUE__: 0;
    __DEFAULT_PROGRESS_VARIANT__: import("./components/Feedback/components/Progress").ProgressVariant;
    __DEFAULT_ALERT_DURATION__: AlertDuration;
    __DEFAULT_ALERT_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_ALERT_STATUS__: AlertStatus;
    __DEFAULT_ALERT_VARIANT__: AlertVariant;
    __DEFAULT_MESSAGE_BODY_SPACING__: ThemeSpacing;
    __DEFAULT_MESSAGE_RADIUS__: ThemeRadius;
    __DEFAULT_MESSAGE_SIZE__: ThemeBorderWidth;
    __DEFAULT_MESSAGE_VARIANT__: MessageVariant;
    __DEFAULT_IMAGE_BLUR__: ThemeBlurClass;
    __DEFAULT_IMAGE_BRIGHTNESS__: BrightnessClass;
    __DEFAULT_IMAGE_CONTRAST__: ContrastClass;
    __DEFAULT_IMAGE_FILTERS__: ImageFilters;
    __DEFAULT_IMAGE_FIT__: ObjectFitClass;
    __DEFAULT_IMAGE_GRAYSCALE__: GrayscaleClass;
    __DEFAULT_IMAGE_HUE_ROTATE__: HueRotateClass;
    __DEFAULT_IMAGE_INVERT__: InvertClass;
    __DEFAULT_IMAGE_OPTIONS__: ImageOptions;
    __DEFAULT_IMAGE_POSITION__: ObjectPositionClass;
    __DEFAULT_IMAGE_SATURATE__: SaturateClass;
    __DEFAULT_IMAGE_SEPIA__: SepiaClass;
    __DEFAULT_ICON_CATEGORY__: IconCategory;
    __DEFAULT_ICON_RADIUS__: ThemeRadius;
    __DEFAULT_ICON_SIZE__: import("./components/DataDisplay/components/Icon/common/types").IconSize;
    __DEFAULT_ICON_VARIANT__: IconVariant;
    __DEFAULT_DIVIDER_ORIENTATION__: import("./components/DataDisplay/components/Divider").DividerOrientation;
    __DEFAULT_DIVIDER_PLACEMENT__: DividerPlacement;
    __DEFAULT_DIVIDER_VARIANT__: DividerVariant;
    __DEFAULT_DUMMY_BADGE_IS_ANIMATED__: true;
    __DEFAULT_DUMMY_BADGE_IS_COMPACT__: false;
    __DEFAULT_DUMMY_BADGE_IS_FULLWIDTH__: false;
    __DEFAULT_DUMMY_BADGE_IS_OUTLINED__: false;
    __DEFAULT_DUMMY_BADGE_IS_ROUND__: false;
    __DEFAULT_DUMMY_BADGE_IS_UPPERCASE__: true;
    __DEFAULT_DUMMY_BADGE_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_DUMMY_BADGE_SIZE__: ThemeFontSize;
    __DEFAULT_DUMMY_BADGE_VARIANT__: DummyBadgeVariant;
    __DEFAULT_CAROUSEL_DOTS__: CarouselDotsType;
    __DEFAULT_CAROUSEL_DOTS_SIZE__: ThemeSpacing;
    __DEFAULT_CAROUSEL_LINEAR_GRADIENT_IS_VISIBLE__: false;
    __DEFAULT_CAROUSEL_OVERLAY_ARROW_ICON_BUTTON_IS_VISIBLE__: false;
    __DEFAULT_CAROUSEL_OVERLAY_ARROW_BUTTON_IS_VISIBLE__: false;
    __DEFAULT_CAROUSEL_ARROW_BUTTON_GROUP_IS_ATTACHED__: true;
    __DEFAULT_CAROUSEL_ARROW_BUTTON_GROUP_IS_FULLWIDTH__: true;
    __DEFAULT_CAROUSEL_ARROW_BUTTON_BOTTOM_LABEL__: "Scroll Bottom";
    __DEFAULT_CAROUSEL_ARROW_BUTTON_HAS_ICON__: true;
    __DEFAULT_CAROUSEL_ARROW_BUTTON_IS_FULLWIDTH__: true;
    __DEFAULT_CAROUSEL_ARROW_BUTTON_LEFT_LABEL__: "Scroll Left";
    __DEFAULT_CAROUSEL_ARROW_BUTTON_RIGHT_LABEL__: "Scroll Right";
    __DEFAULT_CAROUSEL_ARROW_BUTTON_TOP_LABEL__: "Scroll Top";
    __DEFAULT_CAROUSEL_ARROW_ICON_BUTTON_GROUP_IS_ATTACHED__: true;
    __DEFAULT_CAROUSEL_ARROW_ICON_BUTTON_BOTTOM_LABEL__: "Scroll Bottom";
    __DEFAULT_CAROUSEL_ARROW_ICON_BUTTON_HAS_TOOLTIP__: true;
    __DEFAULT_CAROUSEL_ARROW_ICON_BUTTON_LEFT_LABEL__: "Scroll Left";
    __DEFAULT_CAROUSEL_ARROW_ICON_BUTTON_PLACEMENT__: TooltipPlacement;
    __DEFAULT_CAROUSEL_ARROW_ICON_BUTTON_RIGHT_LABEL__: "Scroll Right";
    __DEFAULT_CAROUSEL_ARROW_ICON_BUTTON_TOP_LABEL__: "Scroll Top";
    __DEFAULT_CAROUSEL_DURATION_NUMBER__: number;
    __DEFAULT_CAROUSEL_DURATION_THEME__: ThemeDuration;
    __DEFAULT_CAROUSEL_ID__: string;
    __DEFAULT_CAROUSEL_ITEMS__: CarouselItems;
    __DEFAULT_CAROUSEL_ORIENTTATION__: CarouselOrientation;
    __DEFAULT_CAROUSEL_SCROLL_AMOUNT__: CarouselScrollAmount;
    __DEFAULT_CAROUSEL_VARIANT__: CarouselVariant;
    __DEFAULT_CAROUSEL_VISIBLE_ITEMS__: import("./components/DataDisplay/components/Carousel/common/types").CarouselVisibleItems;
    __DEFAULT_CARD_ID__: string;
    __DEFAULT_CARD_IS_ACTIVE__: false;
    __DEFAULT_CARD_IS_CLICKABLE__: false;
    __DEFAULT_CARD_IS_COLLAPSABLE__: false;
    __DEFAULT_CARD_IS_DISABLED__: false;
    __DEFAULT_CARD_IS_DIVISIBLE__: true;
    __DEFAULT_CARD_IS_FIXED__: false;
    __DEFAULT_CARD_IS_HOVERING__: false;
    __DEFAULT_CARD_IS_OPEN__: false;
    __DEFAULT_CARD_IS_OUTLINED__: false;
    __DEFAULT_CARD_RADIUS__: ThemeRadius;
    __DEFAULT_CARD_VARIANT__: CardVariant;
    __DEFAULT_BADGE_CLOSE_ICON_BUTTON_IS_COMPACT__: true;
    __DEFAULT_BADGE_CLOSE_ICON_BUTTON_SIZE__: IconButtonSize;
    __DEFAULT_BADGE_IS_ACTIVE__: false;
    __DEFAULT_BADGE_IS_CLICKABLE__: false;
    __DEFAULT_BADGE_IS_COMPACT__: false;
    __DEFAULT_BADGE_IS_DISABLED__: false;
    __DEFAULT_BADGE_IS_FULLWIDTH__: false;
    __DEFAULT_BADGE_IS_OUTLINED__: false;
    __DEFAULT_BADGE_IS_ROUND__: false;
    __DEFAULT_BADGE_IS_UPPERCASE__: true;
    __DEFAULT_BADGE_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_BADGE_SIZE__: ThemeFontSize;
    __DEFAULT_BADGE_VARIANT__: BadgeVariant;
    __DEFAULT_BACKGROUND_IMAGE_ATTACHMENT__: BackgroundAttachmentClass;
    __DEFAULT_BACKGROUND_IMAGE_BLEND_MODE__: BackgroundBlendModeClass;
    __DEFAULT_BACKGROUND_IMAGE_BLUR__: ThemeBlurClass;
    __DEFAULT_BACKGROUND_IMAGE_BRIGHTNESS__: BrightnessClass;
    __DEFAULT_BACKGROUND_IMAGE_CLIP__: BackgroundClipClass;
    __DEFAULT_BACKGROUND_IMAGE_CONTRAST__: ContrastClass;
    __DEFAULT_BACKGROUND_IMAGE_FILTERS__: BackgroundImageFilters;
    __DEFAULT_BACKGROUND_IMAGE_GRAYSCALE__: GrayscaleClass;
    __DEFAULT_BACKGROUND_IMAGE_HUE_ROTATE__: HueRotateClass;
    __DEFAULT_BACKGROUND_IMAGE_INVERT__: InvertClass;
    __DEFAULT_BACKGROUND_IMAGE_OPTIONS__: BackgroundImageOptions;
    __DEFAULT_BACKGROUND_IMAGE_ORIGIN__: BackgroundOriginClass;
    __DEFAULT_BACKGROUND_IMAGE_POSITION__: BackgroundPositionClass;
    __DEFAULT_BACKGROUND_IMAGE_REPEAT__: BackgroundRepeatClass;
    __DEFAULT_BACKGROUND_IMAGE_SATURATE__: SaturateClass;
    __DEFAULT_BACKGROUND_IMAGE_SEPIA__: SepiaClass;
    __DEFAULT_BACKGROUND_IMAGE_SIZE__: BackgroundSizeClass;
    __DEFAULT_SCROLL_TO_TOP_ICON_BUTTON_HAS_TOOLTIP__: true;
    __DEFAULT_SCROLL_TO_TOP_ICON_BUTTON_LABEL__: "Scroll to top";
    __DEFAULT_SCROLL_TO_TOP_ICON_BUTTON_PLACEMENT__: TooltipPlacement;
    __DEFAULT_LINK_IS_DISABLED__: false;
    __DEFAULT_LINK_IS_UNDERLINE__: true;
    __DEFAULT_LINK_IS_UNSTYLED__: false;
    __DEFAULT_LINK_OFFSET_SIZE__: Record<"base" | "active" | "hover", TextUnderlineOffsetClass>;
    __DEFAULT_ICON_BUTTON_GROUP_IS_ATTACHED__: false;
    __DEFAULT_ICON_BUTTON_IS_ACTIVE__: false;
    __DEFAULT_ICON_BUTTON_IS_COMPACT__: false;
    __DEFAULT_ICON_BUTTON_IS_DISABLED__: false;
    __DEFAULT_ICON_BUTTON_IS_FOCUSED__: false;
    __DEFAULT_ICON_BUTTON_IS_LOADING__: false;
    __DEFAULT_ICON_BUTTON_IS_OUTLINED__: false;
    __DEFAULT_ICON_BUTTON_IS_ROUND__: false;
    __DEFAULT_ICON_BUTTON_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_ICON_BUTTON_SIZE__: IconButtonSize;
    __DEFAULT_ICON_BUTTON_VARIANT__: IconButtonVariant;
    __DEFAULT_FILE_BUTTON_ACCEPT__: "image/*";
    __DEFAULT_FILE_BUTTON_DURATION__: ThemeDuration;
    __DEFAULT_FILE_BUTTON_IS_MULTIPLE__: false;
    __DEFAULT_FILE_BUTTON_TIMEOUT__: number;
    __DEFAULT_DUMMY_ICON_BUTTON_IS_ANIMATED__: true;
    __DEFAULT_DUMMY_ICON_BUTTON_IS_COMPACT__: false;
    __DEFAULT_DUMMY_ICON_BUTTON_IS_OUTLINED__: false;
    __DEFAULT_DUMMY_ICON_BUTTON_IS_ROUND__: false;
    __DEFAULT_DUMMY_ICON_BUTTON_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_DUMMY_ICON_BUTTON_SIZE__: DummyIconButtonSize;
    __DEFAULT_DUMMY_ICON_BUTTON_VARIANT__: DummyIconButtonVariant;
    __DEFAULT_DUMMY_BUTTON_IS_ANIMATED__: true;
    __DEFAULT_DUMMY_BUTTON_IS_COMPACT__: false;
    __DEFAULT_DUMMY_BUTTON_IS_FULLWIDTH__: false;
    __DEFAULT_DUMMY_BUTTON_IS_OUTLINED__: false;
    __DEFAULT_DUMMY_BUTTON_IS_ROUND__: false;
    __DEFAULT_DUMMY_BUTTON_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_DUMMY_BUTTON_SIZE__: DummyButtonSize;
    __DEFAULT_DUMMY_BUTTON_VARIANT__: DummyButtonVariant;
    __DEFAULT_DELETE_ICON_BUTTON_HAS_TOOLTIP__: true;
    __DEFAULT_DELETE_ICON_BUTTON_LABEL__: "Delete";
    __DEFAULT_DELETE_ICON_BUTTON_PLACEMENT__: TooltipPlacement;
    __DEFAULT_COPY_BUTTON_DURATION__: ThemeDuration;
    __DEFAULT_COPY_BUTTON_TIMEOUT__: CopyButtonTimeout;
    __DEFAULT_CLOSE_ICON_BUTTON_HAS_TOOLTIP__: true;
    __DEFAULT_CLOSE_ICON_BUTTON_LABEL__: "Close";
    __DEFAULT_CLOSE_ICON_BUTTON_PLACEMENT__: TooltipPlacement;
    __DEFAULT_CLEAR_ICON_BUTTON_HAS_TOOLTIP__: true;
    __DEFAULT_CLEAR_ICON_BUTTON_LABEL__: "Clear";
    __DEFAULT_CLEAR_ICON_BUTTON_PLACEMENT__: TooltipPlacement;
    __DEFAULT_BUTTON_GROUP_IS_ATTACHED__: false;
    __DEFAULT_BUTTON_IS_ACTIVE__: false;
    __DEFAULT_BUTTON_IS_COMPACT__: false;
    __DEFAULT_BUTTON_IS_DISABLED__: false;
    __DEFAULT_BUTTON_IS_FOCUSED__: false;
    __DEFAULT_BUTTON_IS_FULLWIDTH__: false;
    __DEFAULT_BUTTON_IS_LOADING__: false;
    __DEFAULT_BUTTON_IS_OUTLINED__: false;
    __DEFAULT_BUTTON_IS_ROUND__: false;
    __DEFAULT_BUTTON_LINE_HEIGHT_SIZE__: ThemeLineHeight;
    __DEFAULT_BUTTON_SIZE__: ButtonSize;
    __DEFAULT_BUTTON_VARIANT__: ButtonVariant;
    __DEFAULT_TRANSITION__: TransitionKey;
    __DEFAULT_TRANSITION_IN__: false;
    __DEFAULT_TRANSITION_UNMOUNT_ON_EXIT__: true;
    __DEFAULT_ANIMATION_DELAY__: number;
    __DEFAULT_ANIMATION_DURATION__: number;
    __DEFAULT_ANIMATION_EASING__: AnimationEasing;
    __DEFAULT_APP_COLOR__: ThemeAppColor;
    __DEFAULT_APP_COLORMODE__: ThemeAppColorMode;
    __DEFAULT_BORDER_STYLE__: BorderStyleClass;
    __DEFAULT_BORDER_WIDTH__: ThemeBorderWidth;
    __DEFAULT_CLASS_PREFIX__: "ds-cl";
    __DEFAULT_CLASSNAME__: "";
    __DEFAULT_COLOR__: ThemeColor;
    __DEFAULT_DELAY__: ThemeDelay;
    __DEFAULT_DURATION__: ThemeDuration;
    __DEFAULT_EASING__: ThemeEase;
    __DEFAULT_HAS_FILLEDICON_LOADED__: boolean;
    __DEFAULT_HAS_OUTLINEDICON_LOADED__: boolean;
    __DEFAULT_HAS_TWOTONEICON_LOADED__: boolean;
    __DEFAULT_METHOD__: () => undefined;
    __DEFAULT_OUTLINE_OFFSET__: OutlineOffsetClass;
    __DEFAULT_OUTLINE_STYLE__: OutlineStyleClass;
    __DEFAULT_OUTLINE_WIDTH__: OutlineWidthClass;
    __DEFAULT_POLYMORPHIC_ELEMENT__: import("react").ElementType;
    __DEFAULT_POLYMORPHIC_OBJECT__: {};
    __DEFAULT_POLYMORPHIC_SX__: {};
    __DEFAULT_RADIUS__: ThemeRadius;
    __DEFAULT_SPACING__: ThemeSpacing;
    __DEFAULT_TEXT_DECORATION_OFFSET__: TextUnderlineOffsetClass;
    __DEFAULT_TEXT_DECORATION_STYLE__: TextDecorationStyleClass;
    __DEFAULT_TEXT_DECORATION_WIDTH__: TextDecorationThicknessClass;
    __DEFAULT_USE_BOOLEAN_TOGGLES__: import("./common/hooks/useBoolean").UseBooleanToggles;
};
export declare const data: {
    transitions: TransitionVariants;
    appColors: ThemeAppColorArr;
    colors: ThemeColorArr;
    delays: ThemeDelayArr;
    durations: ThemeDurationArr;
    fontSizes: ThemeFontSizeArr;
    icons: IconKeys;
};
export * as helpers from './common/helpers';
export declare const hooks: {
    __KEYS_VISUALLY_HIDDEN_CLASS__: "ds-cl-visually-hidden";
    __DEFAULT_TEXT_ALIGN__: TextAlignClass;
    __DEFAULT_TEXT_FONT_SIZE__: ThemeFontSize;
    __DEFAULT_TEXT_FONT_WEIGHT__: ThemeFontWeight;
    __DEFAULT_TEXT_IS_ITALIC__: false;
    __DEFAULT_TEXT_IS_OVERFLOWN__: false;
    __DEFAULT_TEXT_LINE_HEIGHT__: ThemeLineHeight;
    __DEFAULT_TEXT_TRANSFORM__: TextTransformClass;
    __DEFAULT_TEXT_WHITESPACE__: WhitespaceClass;
    __DEFAULT_TEXT_WORD_BREAK__: WordBreakClass;
    useTooltipClasses: <Element_1 extends import("react").ElementType = "div">(props: {
        color: TooltipProps<Element_1>["color"];
        colorMode: TooltipProps<Element_1>["colorMode"];
    }) => {
        content: string;
        tooltip: string;
        arrow: string;
    };
    usePushableOverlayClasses: <Element_2 extends import("react").ElementType = "div">(props: {
        color: PushableOverlayProps<Element_2>["color"];
        radius: PushableOverlayProps<Element_2>["radius"];
        colorMode: PushableOverlayProps<Element_2>["colorMode"];
        isActive: PushableOverlayProps<Element_2>["isActive"];
        isDisabled: PushableOverlayProps<Element_2>["isDisabled"];
        isFixed: PushableOverlayProps<Element_2>["isFixed"];
        isOutlined: PushableOverlayProps<Element_2>["isOutlined"];
        isPushable: PushableOverlayProps<Element_2>["isPushable"];
        variant: PushableOverlayProps<Element_2>["variant"];
    }) => string;
    usePushableOverlayStyles: <Element_3 extends import("react").ElementType = "div">(props: {
        color: PushableOverlayProps<Element_3>["color"];
        colorMode: PushableOverlayProps<Element_3>["colorMode"];
        isActive: PushableOverlayProps<Element_3>["isActive"];
        isDisabled: PushableOverlayProps<Element_3>["isDisabled"];
        isFixed: PushableOverlayProps<Element_3>["isFixed"];
        isPushable: PushableOverlayProps<Element_3>["isPushable"];
        variant: PushableOverlayProps<Element_3>["variant"];
    }) => import("@emotion/serialize").CSSObject;
    usePositionOverlayClasses: <Element_4 extends import("react").ElementType = "div">(props: {
        radius: PositionOverlayProps<Element_4>["radius"];
        blur: PositionOverlayProps<Element_4>["blur"];
        blurType: PositionOverlayProps<Element_4>["blurType"];
        hasGlass: PositionOverlayProps<Element_4>["hasGlass"];
    }) => {
        container: string;
        overlay: string;
    };
    usePositionOverlayStyles: <Element_5 extends import("react").ElementType = "div">(props: {
        color: PositionOverlayProps<Element_5>["color"];
        colorMode: PositionOverlayProps<Element_5>["colorMode"];
        placement: PositionOverlayProps<Element_5>["placement"];
        backdropAmount: PositionOverlayProps<Element_5>["backdropAmount"];
        hasBackground: PositionOverlayProps<Element_5>["hasBackground"];
    }) => {
        position: import("@emotion/serialize").CSSObject;
        overlay: import("@emotion/serialize").CSSObject;
    };
    usePopperClasses: <Element_6 extends import("react").ElementType = "div">(props: {
        color: PopperProps<Element_6>["color"];
        radius: PopperProps<Element_6>["radius"];
        colorMode: PopperProps<Element_6>["colorMode"];
    }) => {
        popper: string;
        arrow: string;
    };
    useModalClasses: <Element_7 extends "dialog" = "dialog">(props: {
        color?: ModalProps<Element_7>["color"] | undefined;
        spacing?: ModalProps<Element_7>["spacing"] | undefined;
        size?: ModalProps<Element_7>["size"] | undefined;
        colorMode?: ModalProps<Element_7>["colorMode"] | undefined;
    }) => {
        content: string;
        container: string;
        backdrop: string;
    };
    useModalContext: <Element_8 extends "dialog" = "dialog">() => {
        color: ModalProps<Element_8>["color"] | undefined;
        colorMode: ModalProps<Element_8>["colorMode"] | undefined;
        id: string;
        isOpen: boolean;
        onClose: (() => void) & import("react").ReactEventHandler<HTMLDialogElement>;
        size: ModalSize;
        spacing: ThemeSpacing;
    };
    useLoadingOverlayClasses: <Element_9 extends import("react").ElementType = "div">(props: {
        radius: LoadingOverlayProps<Element_9>["radius"];
        blur: LoadingOverlayProps<Element_9>["blur"];
        blurType: LoadingOverlayProps<Element_9>["blurType"];
        hasGlass: LoadingOverlayProps<Element_9>["hasGlass"];
    }) => {
        container: string;
        overlay: string;
    };
    useLoadingOverlayStyles: <Element_10 extends import("react").ElementType = "div">(props: {
        color: LoadingOverlayProps<Element_10>["color"];
        colorMode: LoadingOverlayProps<Element_10>["colorMode"];
        backdropAmount: LoadingOverlayProps<Element_10>["backdropAmount"];
        hasBackground: LoadingOverlayProps<Element_10>["hasBackground"];
    }) => import("@emotion/serialize").CSSObject;
    useLinearGradientClasses: <Element_11 extends import("react").ElementType = "div">(props: {
        direction: LinearGradientProps<Element_11>["direction"];
        from: LinearGradientProps<Element_11>["from"];
        to: LinearGradientProps<Element_11>["to"];
        middle: LinearGradientProps<Element_11>["middle"];
    }) => string;
    useIndicatorStyles: <Element_12 extends import("react").ElementType = "div">(props: {
        offset: IndicatorProps<Element_12>["offset"];
        placement: IndicatorProps<Element_12>["placement"];
    }) => {
        position: import("@emotion/serialize").CSSObject;
        overlay: import("@emotion/serialize").CSSObject;
    };
    useGlassOverlayClasses: <Element_13 extends import("react").ElementType = "div">(props: {
        radius: GlassOverlayProps<Element_13>["radius"];
        blur: GlassOverlayProps<Element_13>["blur"];
        blurType: GlassOverlayProps<Element_13>["blurType"];
    }) => {
        container: string;
        overlay: string;
    };
    useGlassOverlayStyles: <Element_14 extends import("react").ElementType = "div">(props: {
        color: GlassOverlayProps<Element_14>["color"];
        colorMode: GlassOverlayProps<Element_14>["colorMode"];
        backdropAmount: GlassOverlayProps<Element_14>["backdropAmount"];
        hasBackground: GlassOverlayProps<Element_14>["hasBackground"];
    }) => import("@emotion/serialize").CSSObject;
    useDummyPushableOverlayClasses: <Element_15 extends import("react").ElementType = "div">(props: {
        radius: DummyPushableOverlayProps<Element_15>["radius"];
        colorMode: DummyPushableOverlayProps<Element_15>["colorMode"];
        isOutlined: DummyPushableOverlayProps<Element_15>["isOutlined"];
        variant: DummyPushableOverlayProps<Element_15>["variant"];
        isAnimated: DummyPushableOverlayProps<Element_15>["isAnimated"];
    }) => string;
    useDummyPushableOverlayStyles: <Element_16 extends import("react").ElementType = "div">(props: {
        color: DummyPushableOverlayProps<Element_16>["color"];
        colorMode: DummyPushableOverlayProps<Element_16>["colorMode"];
        variant: DummyPushableOverlayProps<Element_16>["variant"];
    }) => import("@emotion/serialize").CSSObject;
    useConfirmModalClasses: <Element_17 extends "dialog" = "dialog">(props: {
        color?: ConfirmModalProps<Element_17>["color"] | undefined;
        spacing?: ConfirmModalProps<Element_17>["spacing"] | undefined;
        size?: ConfirmModalProps<Element_17>["size"] | undefined;
        colorMode?: ConfirmModalProps<Element_17>["colorMode"] | undefined;
    }) => {
        content: string;
        container: string;
        backdrop: string;
        cancel: string;
    };
    useConfirmModalContext: <Element_18 extends "dialog" = "dialog">() => {
        color: ConfirmModalProps<Element_18>["color"] | undefined;
        colorMode: ConfirmModalProps<Element_18>["colorMode"] | undefined;
        id: string;
        isOpen: boolean;
        onClose: (() => void) & import("react").ReactEventHandler<HTMLDialogElement>;
        size: ConfirmModalSize;
        spacing: ThemeSpacing;
    };
    useBackdropOverlayClasses: <Element_19 extends import("react").ElementType = "div">(props: {
        radius: BackdropOverlayProps<Element_19>["radius"];
        blur: BackdropOverlayProps<Element_19>["blur"];
        blurType: BackdropOverlayProps<Element_19>["blurType"];
    }) => {
        container: string;
        overlay: string;
    };
    useBackdropOverlayStyles: <Element_20 extends import("react").ElementType = "div">(props: {
        color: BackdropOverlayProps<Element_20>["color"];
        colorMode: BackdropOverlayProps<Element_20>["colorMode"];
        amount: BackdropOverlayProps<Element_20>["amount"];
    }) => import("@emotion/serialize").CSSObject;
    useTabClasses: <Element_21 extends "button" = "button">(props: Pick<TabProps<Element_21>, "color" | "colorMode" | "isActive" | "isDisabled" | "isCompact" | "isUppercase"> & {
        isFocused: boolean;
    }) => {
        label: string;
        tab: string;
        topDivider: string;
        bottomDivider: string;
    };
    useTabSizeConfig: <Element_22 extends "button" = "button">(props: {
        isCompact?: TabProps<Element_22>["isCompact"] | undefined;
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        spacing: ThemeSpacing;
    };
    useTabsContext: <Element_23 extends import("react").ElementType = "div">() => {
        color: TabsProps<Element_23>["color"];
        colorMode: TabsProps<Element_23>["colorMode"];
        align: TabsAlign;
        id: string | TabsProps<Element_23>["id"];
        index: number;
        isDisabled: boolean;
        isFitted: boolean;
        onChange: (() => undefined) | TabsProps<Element_23>["onChange"];
        orientation: TabsOrientation;
        size: TabsSize;
        spacing: ThemeSpacing;
    };
    useTabsTabFontSize: <Element_24 extends import("react").ElementType = "div">(props: {
        size: TabsProps<Element_24>["size"];
    }) => number;
    useStepClasses: <Element_25 extends "button" = "button">(props: Pick<import("./components/Navigation").StepProps<Element_25>, "color" | "colorMode" | "isActive" | "isDisabled" | "isCompact" | "isUppercase"> & {
        isFocused: boolean;
    }) => {
        label: string;
        step: string;
        topDivider: string;
        bottomDivider: string;
    };
    useStepContext: <Element_26 extends "button" = "button">() => {
        id: string;
        index: number | import("./components/Navigation").StepProps<Element_26>["index"];
        status: import("./components/Navigation/components/Stepper/components/Step/common/types").StepStatus;
    };
    useStepResponsiveValues: <Element_27 extends "button" = "button">(props: {
        status?: import("./components/Navigation").StepProps<Element_27>["status"] | undefined;
        isActive?: import("./components/Navigation").StepProps<Element_27>["isActive"] | undefined;
        isDisabled?: import("./components/Navigation").StepProps<Element_27>["isDisabled"] | undefined;
        isCompact?: import("./components/Navigation").StepProps<Element_27>["isCompact"] | undefined;
        isUppercase?: import("./components/Navigation").StepProps<Element_27>["isUppercase"] | undefined;
    }) => {
        isActive: boolean;
        isCompact: boolean;
        isStepDisabled: boolean;
        isUppercase: boolean;
        status: import("./components/Navigation/components/Stepper/components/Step/common/types").StepStatus;
    };
    useStepSizeConfig: <Element_28 extends "button" = "button">(props: {
        isCompact?: import("./components/Navigation").StepProps<Element_28>["isCompact"] | undefined;
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        spacing: ThemeSpacing;
    };
    useStepperContext: <Element_29 extends import("react").ElementType = "div">() => {
        color: import("./components/Navigation").StepperProps<Element_29>["color"];
        colorMode: import("./components/Navigation").StepperProps<Element_29>["colorMode"];
        id: string;
        align: import("./components/Navigation").StepperAlign;
        index: number;
        total: number;
        isConsecutively: boolean;
        isDisabled: boolean;
        isFitted: boolean;
        onChange: (() => undefined) | import("./components/Navigation").StepperProps<Element_29>["onChange"];
        orientation: import("./components/Navigation").StepperOrientation;
        size: import("./components/Navigation").StepperSize;
        spacing: ThemeSpacing;
        variant: import("./components/Navigation/components/Stepper/common/types").StepperVariant;
    };
    useStepperResponsiveValues: <Element_30 extends import("react").ElementType = "div">(props: {
        orientation: import("./components/Navigation").StepperProps<Element_30>["orientation"];
        spacing: import("./components/Navigation").StepperProps<Element_30>["spacing"];
        size: import("./components/Navigation").StepperProps<Element_30>["size"];
        align: import("./components/Navigation").StepperProps<Element_30>["align"];
        isDisabled: import("./components/Navigation").StepperProps<Element_30>["isDisabled"];
        variant: import("./components/Navigation").StepperProps<Element_30>["variant"];
        index: import("./components/Navigation").StepperProps<Element_30>["index"];
        total: import("./components/Navigation").StepperProps<Element_30>["total"];
        isFitted: import("./components/Navigation").StepperProps<Element_30>["isFitted"];
        isConsecutively: import("./components/Navigation").StepperProps<Element_30>["isConsecutively"];
    }) => {
        align: import("./components/Navigation").StepperAlign;
        index: number;
        total: number;
        isConsecutively: boolean;
        isDisabled: boolean;
        isFitted: boolean;
        orientation: import("./components/Navigation").StepperOrientation;
        size: import("./components/Navigation").StepperSize;
        spacing: ThemeSpacing;
        variant: import("./components/Navigation/components/Stepper/common/types").StepperVariant;
    };
    useStepperSizeConfig: <Element_31 extends import("react").ElementType = "div">(props: {
        size: import("./components/Navigation").StepperProps<Element_31>["size"];
    }) => {
        fontSize: Record<"title" | "status" | "subtitle", ThemeFontSize>;
        icon: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        spacing: ThemeSpacing;
    };
    useStepperStepFontSize: <Element_32 extends import("react").ElementType = "div">(props: {
        size: import("./components/Navigation").StepperProps<Element_32>["size"];
    }) => number;
    useDummyTabClasses: <Element_33 extends import("react").ElementType = "div">(props: Pick<DummyTabProps<Element_33>, "color" | "colorMode" | "isCompact" | "isUppercase"> & {
        isSelected: boolean;
    }) => {
        label: string;
        tab: string;
        topDivider: string;
        bottomDivider: string;
    };
    useDummyTabSizeConfig: <Element_34 extends import("react").ElementType = "div">(props: {
        isCompact: DummyTabProps<Element_34>["isCompact"];
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        spacing: ThemeSpacing;
    };
    useDummyTabsContext: <Element_35 extends import("react").ElementType = "div">() => {
        color: DummyTabsProps<Element_35>["color"];
        colorMode: DummyTabsProps<Element_35>["colorMode"];
        align: DummyTabsAlign;
        id: string | DummyTabsProps<Element_35>["id"];
        index: number;
        isAnimated: boolean;
        isFitted: boolean;
        orientation: DummyTabsOrientation;
        size: DummyTabsSize;
        spacing: ThemeSpacing;
    };
    useDummyTabsDummyTabFontSize: <Element_36 extends import("react").ElementType = "div">(props: {
        size: DummyTabsProps<Element_36>["size"];
    }) => number;
    useStackClasses: <Element_37 extends import("react").ElementType = "div">(props: {
        direction: StackProps<Element_37>["direction"];
        spacing: StackProps<Element_37>["spacing"];
        wrap: StackProps<Element_37>["wrap"];
        alignItems: StackProps<Element_37>["alignItems"];
        justifyContent: StackProps<Element_37>["justifyContent"];
    }) => string;
    useSpaceClasses: <Element_38 extends import("react").ElementType = "div">(props: {
        height: SpaceProps<Element_38>["height"];
        width: SpaceProps<Element_38>["width"];
    }) => string;
    useGridItemClasses: <Element_39 extends import("react").ElementType = "div">(props: {
        rowSpan: GridItemProps<Element_39>["rowSpan"];
        alignSelf: GridItemProps<Element_39>["alignSelf"];
        columnSpan: GridItemProps<Element_39>["columnSpan"];
        justifySelf: GridItemProps<Element_39>["justifySelf"];
        zIndex: GridItemProps<Element_39>["zIndex"];
        columnStart: GridItemProps<Element_39>["columnStart"];
        columnEnd: GridItemProps<Element_39>["columnEnd"];
        rowStart: GridItemProps<Element_39>["rowStart"];
        rowEnd: GridItemProps<Element_39>["rowEnd"];
    }) => string;
    useGridClasses: <Element_40 extends import("react").ElementType = "div">(props: {
        spacing: GridProps<Element_40>["spacing"];
        alignContent: GridProps<Element_40>["alignContent"];
        alignItems: GridProps<Element_40>["alignItems"];
        justifyContent: GridProps<Element_40>["justifyContent"];
        justifyItems: GridProps<Element_40>["justifyItems"];
        autoColumns: GridProps<Element_40>["autoColumns"];
        autoFlow: GridProps<Element_40>["autoFlow"];
        autoRows: GridProps<Element_40>["autoRows"];
        columnSpacing: GridProps<Element_40>["columnSpacing"];
        rowSpacing: GridProps<Element_40>["rowSpacing"];
        templateColumns: GridProps<Element_40>["templateColumns"];
        templateRows: GridProps<Element_40>["templateRows"];
    }) => string;
    useGridStyles: <Element_41 extends import("react").ElementType = "div">(props: {
        templateColumns: GridProps<Element_41>["templateColumns"];
        templateRows: GridProps<Element_41>["templateRows"];
    }) => import("@emotion/serialize").CSSObject;
    useContainerClasses: <Element_42 extends import("react").ElementType = "div">(props: {
        breakpoint: ContainerProps<Element_42>["breakpoint"];
        isContentCentered: ContainerProps<Element_42>["isContentCentered"];
        isFluid: ContainerProps<Element_42>["isFluid"];
    }) => string;
    useAspectRatioClasses: <Element_43 extends import("react").ElementType = "div">(props: {
        ratio: AspectRatioProps<Element_43>["ratio"];
    }) => string;
    useSwitchClasses: <Element_44 extends import("react").ElementType = "div">(props: {
        isActive: SwitchProps<Element_44>["isActive"];
        isDisabled: SwitchProps<Element_44>["isDisabled"];
        isClickable: SwitchProps<Element_44>["isClickable"];
        isReadOnly: SwitchProps<Element_44>["isReadOnly"];
    }) => string;
    useSwitchIconSize: <Element_45 extends import("react").ElementType = "div">(props: {
        size: SwitchProps<Element_45>["size"];
        isCompact: SwitchProps<Element_45>["isCompact"];
    }) => {
        size?: ResponsiveValue<import("./components/DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useSwitchResponsiveValues: <Element_46 extends import("react").ElementType = "div">(props: {
        size: SwitchProps<Element_46>["size"];
        isActive: SwitchProps<Element_46>["isActive"];
        isDisabled: SwitchProps<Element_46>["isDisabled"];
        isFocused: SwitchProps<Element_46>["isFocused"];
        isOutlined: SwitchProps<Element_46>["isOutlined"];
        isCompact: SwitchProps<Element_46>["isCompact"];
        isClickable: SwitchProps<Element_46>["isClickable"];
        isError: SwitchProps<Element_46>["isError"];
        isReadOnly: SwitchProps<Element_46>["isReadOnly"];
        isRequired: SwitchProps<Element_46>["isRequired"];
        isSuccess: SwitchProps<Element_46>["isSuccess"];
        isWarning: SwitchProps<Element_46>["isWarning"];
        isChecked: SwitchProps<Element_46>["isChecked"];
        labelPosition: SwitchProps<Element_46>["labelPosition"];
        hasIOLabel: SwitchProps<Element_46>["hasIOLabel"];
    }) => {
        hasIOLabel: boolean;
        isActive: boolean;
        isChecked: boolean;
        isClickable: boolean;
        isCompact: boolean;
        isDisabled: boolean;
        isError: boolean;
        isFocused: boolean;
        isOutlined: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        labelPosition: SwitchLabelPosition;
        size: FormsCommonSize;
    };
    useSwitchSizeConfig: <Element_47 extends import("react").ElementType = "div">(props: {
        size: SwitchProps<Element_47>["size"];
        isCompact: SwitchProps<Element_47>["isCompact"];
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        radius: ThemeRadius;
        spacing: ThemeSpacing;
    };
    useRatingClasses: <Element_48 extends import("react").ElementType = "div">(props: {
        isDisabled: RatingProps<Element_48>["isDisabled"];
        isReadOnly: RatingProps<Element_48>["isReadOnly"];
    }) => string;
    useRatingIconSize: <Element_49 extends import("react").ElementType = "div">(props: {
        size: RatingProps<Element_49>["size"];
    }) => {
        size?: ResponsiveValue<import("./components/DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useRatingResponsiveValues: <Element_50 extends import("react").ElementType = "div">(props: {
        direction: RatingProps<Element_50>["direction"];
        size: RatingProps<Element_50>["size"];
        isDisabled: RatingProps<Element_50>["isDisabled"];
        count: RatingProps<Element_50>["count"];
        isError: RatingProps<Element_50>["isError"];
        isReadOnly: RatingProps<Element_50>["isReadOnly"];
        isRequired: RatingProps<Element_50>["isRequired"];
        isSuccess: RatingProps<Element_50>["isSuccess"];
        isWarning: RatingProps<Element_50>["isWarning"];
        highlightMode: RatingProps<Element_50>["highlightMode"];
    }) => {
        count: number;
        direction: RatingDirection;
        highlightMode: import("./components/Forms/components/Rating/common/types").RatingHighlightMode;
        isDisabled: boolean;
        isError: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        size: FormsCommonSize;
    };
    useRadioClasses: <Element_51 extends import("react").ElementType = "div">(props: {
        isActive: RadioProps<Element_51>["isActive"];
        isDisabled: RadioProps<Element_51>["isDisabled"];
        isClickable: RadioProps<Element_51>["isClickable"];
        isReadOnly: RadioProps<Element_51>["isReadOnly"];
    }) => string;
    useRadioIconSize: <Element_52 extends import("react").ElementType = "div">(props: {
        size: RadioProps<Element_52>["size"];
        isCompact: RadioProps<Element_52>["isCompact"];
    }) => {
        size?: ResponsiveValue<import("./components/DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useRadioResponsiveValues: <Element_53 extends import("react").ElementType = "div">(props: {
        size: RadioProps<Element_53>["size"];
        isActive: RadioProps<Element_53>["isActive"];
        isDisabled: RadioProps<Element_53>["isDisabled"];
        isFocused: RadioProps<Element_53>["isFocused"];
        isOutlined: RadioProps<Element_53>["isOutlined"];
        isCompact: RadioProps<Element_53>["isCompact"];
        isClickable: RadioProps<Element_53>["isClickable"];
        isError: RadioProps<Element_53>["isError"];
        isReadOnly: RadioProps<Element_53>["isReadOnly"];
        isRequired: RadioProps<Element_53>["isRequired"];
        isSuccess: RadioProps<Element_53>["isSuccess"];
        isWarning: RadioProps<Element_53>["isWarning"];
        isChecked: RadioProps<Element_53>["isChecked"];
        labelPosition: RadioProps<Element_53>["labelPosition"];
    }) => {
        isActive: boolean;
        isChecked: boolean;
        isClickable: boolean;
        isCompact: boolean;
        isDisabled: boolean;
        isError: boolean;
        isFocused: boolean;
        isOutlined: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        labelPosition: RadioLabelPosition;
        size: FormsCommonSize;
    };
    useRadioSizeConfig: <Element_54 extends import("react").ElementType = "div">(props: {
        size: RadioProps<Element_54>["size"];
        isCompact: RadioProps<Element_54>["isCompact"];
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        radius: ThemeRadius;
        spacing: ThemeSpacing;
    };
    useCheckboxClasses: <Element_55 extends import("react").ElementType = "div">(props: {
        isActive: CheckboxProps<Element_55>["isActive"];
        isDisabled: CheckboxProps<Element_55>["isDisabled"];
        isClickable: CheckboxProps<Element_55>["isClickable"];
        isReadOnly: CheckboxProps<Element_55>["isReadOnly"];
    }) => string;
    useCheckboxIconSize: <Element_56 extends import("react").ElementType = "div">(props: {
        size: CheckboxProps<Element_56>["size"];
        isCompact: CheckboxProps<Element_56>["isCompact"];
    }) => {
        size?: ResponsiveValue<import("./components/DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useCheckboxResponsiveValues: <Element_57 extends import("react").ElementType = "div">(props: {
        size: CheckboxProps<Element_57>["size"];
        isActive: CheckboxProps<Element_57>["isActive"];
        isDisabled: CheckboxProps<Element_57>["isDisabled"];
        isFocused: CheckboxProps<Element_57>["isFocused"];
        isOutlined: CheckboxProps<Element_57>["isOutlined"];
        isCompact: CheckboxProps<Element_57>["isCompact"];
        isIndeterminate: CheckboxProps<Element_57>["isIndeterminate"];
        isClickable: CheckboxProps<Element_57>["isClickable"];
        isError: CheckboxProps<Element_57>["isError"];
        isReadOnly: CheckboxProps<Element_57>["isReadOnly"];
        isRequired: CheckboxProps<Element_57>["isRequired"];
        isSuccess: CheckboxProps<Element_57>["isSuccess"];
        isWarning: CheckboxProps<Element_57>["isWarning"];
        isChecked: CheckboxProps<Element_57>["isChecked"];
        labelPosition: CheckboxProps<Element_57>["labelPosition"];
    }) => {
        isActive: boolean;
        isChecked: boolean;
        isClickable: boolean;
        isCompact: boolean;
        isDisabled: boolean;
        isError: boolean;
        isFocused: boolean;
        isIndeterminate: boolean;
        isOutlined: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        labelPosition: CheckboxLabelPosition;
        size: FormsCommonSize;
    };
    useCheckboxSizeConfig: <Element_58 extends import("react").ElementType = "div">(props: {
        size: CheckboxProps<Element_58>["size"];
        isCompact: CheckboxProps<Element_58>["isCompact"];
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        radius: ThemeRadius;
        spacing: ThemeSpacing;
    };
    useFormControlContext: <Element_59 extends import("react").ElementType = "div">() => {
        color: FormControlProps<Element_59>["color"];
        colorMode: FormControlProps<Element_59>["colorMode"];
        id: string | FormControlProps<Element_59>["id"];
        hasFormControl: ResponsiveValue<boolean>;
        isDisabled: boolean;
        isError: boolean;
        isFocused: boolean;
        isReadOnly: boolean;
        isRequired: boolean;
        isSuccess: boolean;
        isWarning: boolean;
        size: FormsCommonSize;
        spacing: ThemeSpacing;
    };
    useFormControlFontSize: <Element_60 extends import("react").ElementType = "div">(props: {
        size: FormControlProps<Element_60>["size"];
    }) => {
        label: ThemeFontSize;
        description: ThemeFontSize;
        helper: ThemeFontSize;
    };
    useFormsClasses: (props: {
        color?: ThemeAppColor | undefined;
        size?: ResponsiveValue<FormsCommonSize> | undefined;
        colorMode?: ThemeAppColorMode | undefined;
        isDisabled?: ResponsiveValue<boolean> | undefined;
        isOutlined?: ResponsiveValue<boolean> | undefined;
        variant?: ResponsiveValue<FormsCommonVariant> | undefined;
        isCompact?: ResponsiveValue<boolean> | undefined;
        isError?: ResponsiveValue<boolean> | undefined;
        isReadOnly?: ResponsiveValue<boolean> | undefined;
        isSuccess?: ResponsiveValue<boolean> | undefined;
        isWarning?: ResponsiveValue<boolean> | undefined;
    }) => {
        container: string;
        element: string;
    };
    useFormsIconSize: (props: {
        size?: ResponsiveValue<FormsCommonSize> | undefined;
        variant?: ResponsiveValue<FormsCommonVariant> | undefined;
        isCompact?: ResponsiveValue<boolean> | undefined;
    }) => {
        size?: ResponsiveValue<import("./components/DataDisplay/components/Icon/common/types").IconSize> | undefined;
        w?: ResponsiveValue<import("csstype").Property.Width<string | number> | NonNullable<import("csstype").Property.Width<string | number> | undefined>[] | (string | (string & {}))[] | undefined>;
        h?: ResponsiveValue<(string | (string & {}))[] | import("csstype").Property.Height<string | number> | NonNullable<import("csstype").Property.Height<string | number> | undefined>[] | undefined>;
    };
    useFormsSizeConfig: (props: {
        size?: ResponsiveValue<FormsCommonSize> | undefined;
        variant?: ResponsiveValue<FormsCommonVariant> | undefined;
        isCompact?: ResponsiveValue<boolean> | undefined;
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        radius: ThemeRadius;
        spacing: ThemeSpacing;
    };
    useFormsStyles: (props: Pick<FormsCommonProps, "color" | "colorMode" | "isDisabled" | "isFocused" | "variant" | "isError" | "isReadOnly" | "isSuccess" | "isWarning"> & {
        element: "input" | "textarea";
    }) => import("@emotion/serialize").CSSObject;
    useSkeletonClasses: <Element_61 extends import("react").ElementType = "div">(props: {
        color: SkeletonProps<Element_61>["color"];
        radius: SkeletonProps<Element_61>["radius"];
        colorMode: SkeletonProps<Element_61>["colorMode"];
        isAnimated: SkeletonProps<Element_61>["isAnimated"];
    }) => string;
    useProgressSectionClasses: <Element_62 extends import("react").ElementType = "div">(props: {
        color: ProgressSectionProps<Element_62>["color"];
        colorMode: ProgressSectionProps<Element_62>["colorMode"];
    }) => string;
    useProgressClasses: <Element_63 extends import("react").ElementType = "div">(props: {
        color: ProgressProps<Element_63>["color"];
        radius: ProgressProps<Element_63>["radius"];
        colorMode: ProgressProps<Element_63>["colorMode"];
    }) => string;
    useProgressContext: <Element_64 extends import("react").ElementType = "div">() => {
        color: ProgressProps<Element_64>["color"];
        colorMode: ProgressProps<Element_64>["colorMode"];
        isIndeterminate: boolean;
        max: number;
        min: number;
        radius: ThemeRadius;
        variant: import("./components/Feedback/components/Progress").ProgressVariant;
    };
    useProgressStyles: <Element_65 extends import("react").ElementType = "div">(props: {
        variant: ProgressProps<Element_65>["variant"];
    }) => import("@emotion/serialize").CSSObject;
    useAlertClasses: <Element_66 extends import("react").ElementType = "div">(props: {
        color: AlertProps<Element_66>["color"];
        status: AlertProps<Element_66>["status"];
        colorMode: AlertProps<Element_66>["colorMode"];
    }) => string;
    useAlertContext: <Element_67 extends import("react").ElementType = "div">() => {
        color: AlertProps<Element_67>["color"];
        colorMode: AlertProps<Element_67>["colorMode"];
        status: AlertStatus;
        variant: AlertVariant;
    };
    useMessageClasses: <Element_68 extends import("react").ElementType = "div">(props: {
        color?: MessageProps<Element_68>["color"] | undefined;
        radius?: MessageProps<Element_68>["radius"] | undefined;
        size?: MessageProps<Element_68>["size"] | undefined;
        colorMode?: MessageProps<Element_68>["colorMode"] | undefined;
        variant?: MessageProps<Element_68>["variant"] | undefined;
    }) => string;
    useMessageContext: <Element_69 extends import("react").ElementType = "div">() => MessageContext<Element_69>;
    useImageClasses: <Element_70 extends import("react").ElementType = "div">(props: {
        color: ImageProps<Element_70>["color"];
        radius: ImageProps<Element_70>["radius"];
        filters: ImageProps<Element_70>["filters"];
        options: ImageProps<Element_70>["options"];
        colorMode: ImageProps<Element_70>["colorMode"];
    }) => {
        image: string;
        container: string;
        thumbnail: string;
        fallback: string;
    };
    useIconClasses: <Element_71 extends "span">(props: {
        color?: IconProps<Element_71>["color"] | undefined;
        radius?: IconProps<Element_71>["radius"] | undefined;
        size?: IconProps<Element_71>["size"] | undefined;
        colorMode?: IconProps<Element_71>["colorMode"] | undefined;
        variant?: IconProps<Element_71>["variant"] | undefined;
    }) => string;
    useIconStyles: <Element_72 extends "span" = "span">(props: {
        size?: IconProps<Element_72>["size"] | undefined;
    }) => import("@emotion/serialize").CSSObject;
    useDummyBadgeClasses: <Element_73 extends import("react").ElementType = "div">(props: {
        size: DummyBadgeProps<Element_73>["size"];
        variant: DummyBadgeProps<Element_73>["variant"];
        isCompact: DummyBadgeProps<Element_73>["isCompact"];
        isFullWidth: DummyBadgeProps<Element_73>["isFullWidth"];
        isRound: DummyBadgeProps<Element_73>["isRound"];
        isUppercase: DummyBadgeProps<Element_73>["isUppercase"];
    }) => string;
    useDummyBadgeContext: <Element_74 extends import("react").ElementType = "div">() => {
        color: DummyBadgeProps<Element_74>["color"];
        colorMode: DummyBadgeProps<Element_74>["colorMode"];
        size: ThemeFontSize;
        variant: DummyBadgeVariant;
    };
    useDummyBadgeFontSize: <Element_75 extends import("react").ElementType = "div">(props: {
        size: DummyBadgeProps<Element_75>["size"];
    }) => number;
    useDummyBadgeSizeConfig: <Element_76 extends import("react").ElementType = "div">(props: {
        size: DummyBadgeProps<Element_76>["size"];
        variant: DummyBadgeProps<Element_76>["variant"];
        isCompact: DummyBadgeProps<Element_76>["isCompact"];
        isRound: DummyBadgeProps<Element_76>["isRound"];
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        radius: ThemeRadius;
        spacing: ThemeSpacing;
    };
    useDividerClasses: <Element_77 extends "div">(props: {
        color?: DividerProps<Element_77>["color"] | undefined;
        orientation?: DividerProps<Element_77>["orientation"] | undefined;
        size?: DividerProps<Element_77>["size"] | undefined;
        colorMode?: DividerProps<Element_77>["colorMode"] | undefined;
        variant?: DividerProps<Element_77>["variant"] | undefined;
        placement?: DividerProps<Element_77>["placement"] | undefined;
    }) => string;
    useDividerStyles: <Element_78 extends "div">(props: Pick<DividerProps<Element_78>, "color" | "orientation" | "spacing" | "size" | "placement"> & {
        hasChildren: boolean;
    }) => import("@emotion/serialize").CSSObject;
    useCarouselDotClasses: <Element_79 extends import("react").ElementType = "div">(props: Pick<CarouselDotProps<Element_79>, "color" | "size" | "colorMode"> & {
        isVisible: boolean;
    }) => {
        item: string;
        scale100: string;
        scale75: string;
        scale50: string;
    };
    useCarouselArrowState: (direction: PickFrom<CarouselVariant, "left" | "right">) => {
        isDisabled: boolean;
        isVisible: boolean;
    };
    useCarouselClasses: <Element_80 extends import("react").ElementType = "div">(props: {
        orientation: CarouselProps<Element_80>["orientation"];
        spacing: CarouselProps<Element_80>["spacing"];
        variant: CarouselProps<Element_80>["variant"];
    }) => Record<"items" | "item", string> & {
        overflow: Record<"hidden" | "auto", string>;
    };
    useCarouselContext: <Element_81 extends import("react").ElementType = "div">() => {
        color: CarouselProps<Element_81>["color"];
        colorMode: CarouselProps<Element_81>["colorMode"];
        id: string | CarouselProps<Element_81>["id"];
        items: CarouselItems;
        visibleItems: import("./components/DataDisplay/components/Carousel/common/types").CarouselVisibleItems;
        scrollAmount: CarouselScrollAmount;
        spacing: ThemeSpacing;
        orientation: CarouselOrientation;
        variant: CarouselVariant;
    };
    useCarouselManager: () => {
        getItemByKey: (key: string) => Undefinable<CarouselItem>;
        getItemIndexByKey: (key: string) => Undefinable<number>;
        getItemByIndex: (index: number) => Undefinable<CarouselItem>;
        getItemPos: (key: string) => Record<"next" | "prev", Undefinable<CarouselItem>>;
        getNextItem: () => Undefinable<CarouselItem>;
        getPrevItem: () => Undefinable<CarouselItem>;
        isFirstItem: (key: string) => boolean;
        isFirstItemVisible: () => boolean;
        getFirstVisibleItem: () => Undefinable<CarouselItem>;
        isItemVisible: (key: string) => boolean;
        isLastItem: (key: string) => boolean;
        isLastItemVisible: () => boolean;
        getLastVisibleItem: () => Undefinable<CarouselItem>;
        scrollToItem: (item?: CarouselItem | undefined, inline?: ScrollLogicalPosition, block?: ScrollLogicalPosition) => void;
        scrollNext: (inline?: ScrollLogicalPosition, block?: ScrollLogicalPosition) => void;
        scrollPrev: (inline?: ScrollLogicalPosition, block?: ScrollLogicalPosition) => void;
    };
    useCardContext: <Element_82 extends import("react").ElementType = "div">() => {
        color: CardProps<Element_82>["color"];
        colorMode: CardProps<Element_82>["colorMode"];
        isCollapsable: boolean;
        isDisabled: boolean;
        isDivisible: boolean;
        isHovering: boolean;
        isOpen: boolean;
        onHover: import("./common/hooks/useBoolean").UseBooleanToggles;
        spacing: ThemeSpacing;
        variant: CardVariant;
    };
    useBadgeClasses: <Element_83 extends import("react").ElementType = "div">(props: {
        size: BadgeProps<Element_83>["size"];
        variant: BadgeProps<Element_83>["variant"];
        isCompact: BadgeProps<Element_83>["isCompact"];
        isFullWidth: BadgeProps<Element_83>["isFullWidth"];
        isRound: BadgeProps<Element_83>["isRound"];
        isUppercase: BadgeProps<Element_83>["isUppercase"];
    }) => string;
    useBadgeContext: <Element_84 extends import("react").ElementType = "div">() => {
        color: BadgeProps<Element_84>["color"];
        colorMode: BadgeProps<Element_84>["colorMode"];
        size: ThemeFontSize;
        variant: BadgeVariant;
    };
    useBadgeFontSize: <Element_85 extends import("react").ElementType = "div">(props: {
        size: BadgeProps<Element_85>["size"];
    }) => number;
    useBadgeSizeConfig: <Element_86 extends import("react").ElementType = "div">(props: {
        size: BadgeProps<Element_86>["size"];
        variant: BadgeProps<Element_86>["variant"];
        isCompact: BadgeProps<Element_86>["isCompact"];
        isRound: BadgeProps<Element_86>["isRound"];
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        radius: ThemeRadius;
        spacing: ThemeSpacing;
    };
    useBackgroundImageClasses: <Element_87 extends import("react").ElementType = "div">(props: {
        radius: BackgroundImageProps<Element_87>["radius"];
        filters: BackgroundImageProps<Element_87>["filters"];
        options: BackgroundImageProps<Element_87>["options"];
    }) => {
        image: string;
        container: string;
    };
    useLinkClasses: <Element_88 extends "a" = "a">(props: {
        color?: LinkProps<Element_88>["color"] | undefined;
        colorMode?: LinkProps<Element_88>["colorMode"] | undefined;
        isDisabled?: LinkProps<Element_88>["isDisabled"] | undefined;
        isUnderline?: LinkProps<Element_88>["isUnderline"] | undefined;
        isUnstyled?: LinkProps<Element_88>["isUnstyled"] | undefined;
    }) => string;
    useIconButtonGroupItemClasses: <Element_89 extends import("react").ElementType = "div">(props: {
        index: IconButtonGroupItemProps<Element_89>["index"];
        total: IconButtonGroupItemProps<Element_89>["total"];
    }) => string;
    useIconButtonGroupContext: <Element_90 extends import("react").ElementType = "div">() => {
        color: IconButtonGroupProps<Element_90>["color"];
        colorMode: IconButtonGroupProps<Element_90>["colorMode"];
        direction: FlexDirectionClass;
        isAttached: boolean;
        isCompact: IconButtonGroupProps<Element_90>["isCompact"];
        isDisabled: IconButtonGroupProps<Element_90>["isDisabled"];
        isRound: IconButtonGroupProps<Element_90>["isRound"];
        size: IconButtonGroupProps<Element_90>["size"];
        variant: IconButtonGroupProps<Element_90>["variant"];
    };
    useIconButtonClasses: <Element_91 extends "button" = "button">(props: {
        variant?: IconButtonProps<Element_91>["variant"] | undefined;
    }) => string;
    useIconButtonContext: <Element_92 extends "button" = "button">() => {
        color: IconButtonProps<Element_92>["color"] | undefined;
        colorMode: IconButtonProps<Element_92>["colorMode"] | undefined;
        size: IconButtonSize;
        variant: IconButtonVariant;
    };
    useIconButtonFontSize: <Element_93 extends "button" = "button">(props: {
        size?: IconButtonProps<Element_93>["size"] | undefined;
    }) => number;
    useIconButtonSizeConfig: <Element_94 extends "button" = "button">(props: {
        size?: IconButtonProps<Element_94>["size"] | undefined;
        variant?: IconButtonProps<Element_94>["variant"] | undefined;
        isCompact?: IconButtonProps<Element_94>["isCompact"] | undefined;
        isRound?: IconButtonProps<Element_94>["isRound"] | undefined;
    }) => {
        fontSize: ThemeFontSize;
        padding: ThemeSpacing;
        radius: ThemeRadius;
    };
    useIconButtonStyles: <Element_95 extends "button" = "button">(props: {
        size?: IconButtonProps<Element_95>["size"] | undefined;
    }) => import("@emotion/serialize").CSSObject;
    useDummyIconButtonClasses: <Element_96 extends import("react").ElementType = "div">(props: {
        variant: DummyIconButtonProps<Element_96>["variant"];
    }) => string;
    useDummyIconButtonContext: <Element_97 extends import("react").ElementType = "div">() => {
        color: DummyIconButtonProps<Element_97>["color"];
        colorMode: DummyIconButtonProps<Element_97>["colorMode"];
        size: DummyIconButtonSize;
        variant: DummyIconButtonVariant;
    };
    useDummyIconButtonFontSize: <Element_98 extends import("react").ElementType = "div">(props: {
        size: DummyIconButtonProps<Element_98>["size"];
    }) => number;
    useDummyIconButtonSizeConfig: <Element_99 extends import("react").ElementType = "div">(props: {
        size: DummyIconButtonProps<Element_99>["size"];
        variant: DummyIconButtonProps<Element_99>["variant"];
        isCompact: DummyIconButtonProps<Element_99>["isCompact"];
        isRound: DummyIconButtonProps<Element_99>["isRound"];
    }) => {
        fontSize: ThemeFontSize;
        padding: ThemeSpacing;
        radius: ThemeRadius;
    };
    useDummyIconButtonStyles: <Element_100 extends import("react").ElementType = "div">(props: {
        size: DummyIconButtonProps<Element_100>["size"];
    }) => import("@emotion/serialize").CSSObject;
    useDummyButtonClasses: <Element_101 extends import("react").ElementType = "div">(props: {
        size: DummyButtonProps<Element_101>["size"];
        variant: DummyButtonProps<Element_101>["variant"];
        isCompact: DummyButtonProps<Element_101>["isCompact"];
        isFullWidth: DummyButtonProps<Element_101>["isFullWidth"];
        isRound: DummyButtonProps<Element_101>["isRound"];
        isAnimated: DummyButtonProps<Element_101>["isAnimated"];
    }) => string;
    useDummyButtonContext: <Element_102 extends import("react").ElementType = "div">() => {
        color: DummyButtonProps<Element_102>["color"];
        colorMode: DummyButtonProps<Element_102>["colorMode"];
        size: DummyButtonSize;
        variant: DummyButtonVariant;
    };
    useDummyButtonFontSize: <Element_103 extends import("react").ElementType = "div">(props: {
        size: DummyButtonProps<Element_103>["size"];
    }) => number;
    useDummyButtonSizeConfig: <Element_104 extends import("react").ElementType = "div">(props: {
        size: DummyButtonProps<Element_104>["size"];
        variant: DummyButtonProps<Element_104>["variant"];
        isCompact: DummyButtonProps<Element_104>["isCompact"];
        isRound: DummyButtonProps<Element_104>["isRound"];
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        radius: ThemeRadius;
        spacing: ThemeSpacing;
    };
    useCopyToClipboard: () => [string | null, (text: string) => Promise<boolean>];
    useButtonGroupItemClasses: <Element_105 extends import("react").ElementType = "div">(props: {
        index: ButtonGroupItemProps<Element_105>["index"];
        total: ButtonGroupItemProps<Element_105>["total"];
    }) => string;
    useButtonGroupContext: <Element_106 extends import("react").ElementType = "div">() => {
        color: ButtonGroupProps<Element_106>["color"];
        colorMode: ButtonGroupProps<Element_106>["colorMode"];
        direction: FlexDirectionClass;
        isAttached: boolean;
        isCompact: ButtonGroupProps<Element_106>["isCompact"];
        isDisabled: ButtonGroupProps<Element_106>["isDisabled"];
        isFullWidth: ButtonGroupProps<Element_106>["isFullWidth"];
        isRound: ButtonGroupProps<Element_106>["isRound"];
        size: ButtonGroupProps<Element_106>["size"];
        variant: ButtonGroupProps<Element_106>["variant"];
    };
    useButtonClasses: <Element_107 extends "button" = "button">(props: {
        size?: ButtonProps<Element_107>["size"] | undefined;
        variant?: ButtonProps<Element_107>["variant"] | undefined;
        isCompact?: ButtonProps<Element_107>["isCompact"] | undefined;
        isFullWidth?: ButtonProps<Element_107>["isFullWidth"] | undefined;
        isRound?: ButtonProps<Element_107>["isRound"] | undefined;
    }) => string;
    useButtonContext: <Element_108 extends "button" = "button">() => {
        color: ButtonProps<Element_108>["color"] | undefined;
        colorMode: ButtonProps<Element_108>["colorMode"] | undefined;
        size: ButtonSize;
        variant: ButtonVariant;
    };
    useButtonFontSize: <Element_109 extends "button" = "button">(props: {
        size?: ButtonProps<Element_109>["size"] | undefined;
    }) => number;
    useButtonSizeConfig: <Element_110 extends "button" = "button">(props: {
        size?: ButtonProps<Element_110>["size"] | undefined;
        variant?: ButtonProps<Element_110>["variant"] | undefined;
        isCompact?: ButtonProps<Element_110>["isCompact"] | undefined;
        isRound?: ButtonProps<Element_110>["isRound"] | undefined;
    }) => {
        fontSize: ThemeFontSize;
        padding: Record<"x" | "y", ThemeSpacing>;
        radius: ThemeRadius;
        spacing: ThemeSpacing;
    };
    useBoxStyles: <Element_111 extends import("react").ElementType = "div">(props: {
        p: BoxProps<Element_111>["p"];
        w: BoxProps<Element_111>["w"];
        minW: BoxProps<Element_111>["minW"];
        maxW: BoxProps<Element_111>["maxW"];
        h: BoxProps<Element_111>["h"];
        minH: BoxProps<Element_111>["minH"];
        maxH: BoxProps<Element_111>["maxH"];
        px: BoxProps<Element_111>["px"];
        py: BoxProps<Element_111>["py"];
        pl: BoxProps<Element_111>["pl"];
        pt: BoxProps<Element_111>["pt"];
        pr: BoxProps<Element_111>["pr"];
        pb: BoxProps<Element_111>["pb"];
        m: BoxProps<Element_111>["m"];
        mx: BoxProps<Element_111>["mx"];
        my: BoxProps<Element_111>["my"];
        ml: BoxProps<Element_111>["ml"];
        mt: BoxProps<Element_111>["mt"];
        mr: BoxProps<Element_111>["mr"];
        mb: BoxProps<Element_111>["mb"];
    }) => import("@emotion/serialize").CSSObject;
    useTransitionResponsiveValues: <Element_112 extends import("react").ElementType = "div">(props: {
        in: TransitionProps<Element_112>["in"];
        transition: TransitionProps<Element_112>["transition"];
        duration: TransitionProps<Element_112>["duration"];
        config: TransitionProps<Element_112>["config"];
        delay: TransitionProps<Element_112>["delay"];
        easing: TransitionProps<Element_112>["easing"];
        unmountOnExit: TransitionProps<Element_112>["unmountOnExit"];
    }) => {
        config: Undefinable<AnimationConfig>;
        delay: Undefinable<TransitionDelay>;
        duration: TransitionDuration;
        easing: ThemeEase;
        in: boolean;
        transition: TransitionKey | TransitionVariant;
        unmountOnExit: boolean;
    };
    useAppTheme: () => import("utility-types/dist/mapped-types")._DeepRequiredObject<Partial<{
        color: ThemeAppColor;
        colorMode: ThemeAppColorMode;
    }>>;
    useBoolean: (initialState?: import("./common/hooks/useBoolean").UseBooleanParams) => import("./common/hooks/useBoolean").UseBooleanReturn;
    useConst: <T extends unknown>(params: T | (() => T)) => T;
    useDebounce: <T_1>(value: T_1, delay?: ThemeDuration) => T_1;
    useGetAmount: (props: {
        colorMode?: ThemeAppColorMode | undefined;
        types?: import("./common/utils/amount").GetAmountTypeArr | undefined;
    }) => import("./common/utils/amount").GetAmountTypeObj;
    useGetClass: <D>(responsiveValue: ResponsiveValue<D>, keys?: string[]) => string;
    useGetColor: (props: Partial<{
        color: ThemeColor;
        colorMode: ThemeAppColorMode;
    }> & {
        colorType: "color" | "default";
        hueType?: common_utils.ColorHueType | undefined;
        classType?: ColorTypeClass | undefined;
    }) => string;
    useGetResponsiveValue: <D_1>(value: ResponsiveValue<D_1>) => D_1;
    useMediaQuery: (query: string | {
        breakpoint: ThemeBreakpoint;
        type: "height" | "width";
        direction: "max" | "min";
    }) => boolean;
    useTheme: () => {
        borderRadius: ThemeRadiusObj;
        colors: ThemeColorObj;
        container: ThemeBreakpointObj;
        fontSizes: ThemeFontSizeObj;
        fontWeights: ThemeFontWeightObj;
        lineHeights: ThemeLineHeightObj;
        transition: {
            delay: ThemeDelayObj;
            duration: ThemeDurationObj;
            easing: ThemeEaseObj;
        };
        spacing: ThemeSpacingObj;
        zIndex: ZIndexClassObj;
    };
};
export declare const keys: {
    __KEYS_VISUALLY_HIDDEN_CLASS__: "ds-cl-visually-hidden";
    __DEFAULT_TEXT_ALIGN__: TextAlignClass;
    __DEFAULT_TEXT_FONT_SIZE__: ThemeFontSize;
    __DEFAULT_TEXT_FONT_WEIGHT__: ThemeFontWeight;
    __DEFAULT_TEXT_IS_ITALIC__: false;
    __DEFAULT_TEXT_IS_OVERFLOWN__: false;
    __DEFAULT_TEXT_LINE_HEIGHT__: ThemeLineHeight;
    __DEFAULT_TEXT_TRANSFORM__: TextTransformClass;
    __DEFAULT_TEXT_WHITESPACE__: WhitespaceClass;
    __DEFAULT_TEXT_WORD_BREAK__: WordBreakClass;
    __KEYS_TOOLTIP_CLASS__: "ds-cl-tooltip";
    __KEYS_STATE_OVERLAY_CLASS__: "ds-cl-state-overlay";
    __KEYS_PUSHABLE_OVERLAY_CLASS__: "ds-cl-pushable-overlay";
    __KEYS_POSITION_OVERLAY_CLASS__: "ds-cl-position-overlay";
    __KEYS_POPPER_CLASS__: "ds-cl-popper";
    __KEYS_MODAL_TITLE_CLASS__: "ds-cl-modal-title";
    __KEYS_MODAL_SUBTITLE_CLASS__: "ds-cl-modal-subtitle";
    __KEYS_MODAL_STACK_CLASS__: "ds-cl-modal-stack";
    __KEYS_MODAL_HEADER_CLASS__: "ds-cl-modal-header";
    __KEYS_MODAL_FOOTER_CLASS__: "ds-cl-modal-footer";
    __KEYS_MODAL_BODY_CLASS__: "ds-cl-modal-body";
    __KEYS_MODAL_BACKDROP_CLASS__: "ds-cl-modal-backdrop";
    __KEYS_MODAL_CLASS__: "ds-cl-modal";
    __KEYS_LOADING_OVERLAY_CLASS__: "ds-cl-loading-overlay";
    __KEYS_LINEAR_GRADIENT_CLASS__: "ds-cl-linear-gradient";
    __KEYS_INDICATOR_CLASS__: "ds-cl-indicator";
    __KEYS_HOVER_OVERLAY_CLASS__: "ds-cl-hover-overlay";
    __KEYS_GLASS_OVERLAY_CLASS__: "ds-cl-glass-overlay";
    __KEY_DUMMY_PUSHABLE_OVERLAY_CLASS__: "ds-cl-dummy-pushable-overlay";
    confirm_modal_actions_keys: typeof import("./components/Overlay/components/ConfirmModal/components/ConfirmModalActions/common/keys");
    confirm_modal_backdrop_keys: typeof import("./components/Overlay/components/ConfirmModal/components/ConfirmModalBackdrop/common/keys");
    confirm_modal_body_keys: typeof import("./components/Overlay/components/ConfirmModal/components/ConfirmModalBody/common/keys");
    confirm_modal_icon_keys: typeof import("./components/Overlay/components/ConfirmModal/components/ConfirmModalIcon/common/keys");
    confirm_modal_stack_keys: typeof import("./components/Overlay/components/ConfirmModal/components/ConfirmModalStack/common/keys");
    confirm_modal_subtitle_keys: typeof import("./components/Overlay/components/ConfirmModal/components/ConfirmModalSubtitle/common/keys");
    confirm_modal_title_keys: typeof import("./components/Overlay/components/ConfirmModal/components/ConfirmModalTitle/common/keys");
    __KEYS_CONFIRM_MODAL_CLASS__: "ds-cl-confirm-modal";
    __KEYS_BACKDROP_OVERLAY_CLASS__: "ds-cl-backdrop-overlay";
    __KEYS_TABS_TAB_PANELS_CLASS__: "ds-cl-tabs-tab-panels";
    __KEYS_TABS_TAB_LIST_CLASS__: "ds-cl-tabs-tab-list";
    __KEYS_TAB_ICON_CLASS__: "ds-cl-tabs-tab-icon";
    __KEYS_TAB_CLASS__: "ds-cl-tabs-tab";
    __KEYS_TABS_CLASS__: "ds-cl-tabs";
    __KEYS_STEP_TITLE_CLASS__: "ds-cl-step-title";
    __KEYS_STEP_SUBTITLE_CLASS__: "ds-cl-stepper-step-subtitle";
    __KEYS_STEP_STATUS_ICON_CLASS__: "ds-cl-stepper-step-status-icon";
    __KEYS_STEP_STATUS_CLASS__: "ds-cl-stepper-step-status";
    __KEYS_STEP_PROGRESS_CLASS__: "ds-cl-stepper-step-progress";
    __KEYS_STEPPER_STEP_PANELS_CLASS__: "ds-cl-stepper-step-panels";
    __KEYS_STEPPER_STEP_LIST_CLASS__: "ds-cl-stepper-step-list";
    __KEYS_STEP_ICON_CLASS__: "ds-cl-stepper-step-icon";
    __KEYS_STEP_HEADLINE_CLASS__: "ds-cl-stepper-step-headline";
    __KEYS_STEP_CLASS__: "ds-cl-stepper-step";
    __KEYS_STEPPER_CLASS__: "ds-cl-stepper";
    __KEY_DUMMY_TAB_SKELETON_CLASS__: "ds-cl-dummy-tabs-skeleton";
    __KEYS_DUMMY_TABS_TAB_PANELS_CLASS__: "ds-cl-dummy-tabs-tab-panels";
    __KEYS_DUMMY_TABS_TAB_LIST_CLASS__: "ds-cl-dummy-tabs-tab-list";
    __KEYS_DUMMY_TAB_ICON_CLASS__: "ds-cl-dummy-tabs-tab-icon";
    __KEYS_DUMMY_TAB_CLASS__: "ds-cl-dummy-tabs-tab";
    __KEYS_DUMMY_TABS_CLASS__: "ds-cl-dummy-tabs";
    __KEYS_STACK_CLASS__: "ds-cl-stack";
    __KEYS_SPACE_CLASS__: "ds-cl-space";
    __KEYS_GRID_ITEM_CLASS__: "ds-cl-grid-item";
    __KEYS_GRID_CLASS__: "ds-cl-grid";
    __KEYS_CONTAINER_CLASS__: "ds-cl-container";
    __KEYS_ASPECT_RATIO_CLASS__: "ds-cl-aspect-ratio";
    __KEYS_SWITCH_CLASS__: "ds-cl-switch";
    __KEYS_SEARCH_INPUT_CLASS__: "ds-cl-search-input";
    __KEYS_RATING_CLASS__: "ds-cl-rating";
    __KEYS_RADIO_CLASS__: "ds-cl-radio";
    __KEYS_PASSWORD_INPUT_CLASS__: "ds-cl-password-input";
    __KEYS_FILE_INPUT_CLASS__: "ds-cl-file-input";
    __KEYS_EMAIL_INPUT_CLASS__: "ds-cl-email-input";
    __KEYS_CHECKBOX_CLASS__: "ds-cl-checkbox";
    __KEYS_TEXT_INPUT_CLASS__: "ds-cl-text-input";
    __KEYS_TEXTAREA_CLASS__: "ds-cl-textarea";
    __KEYS_TEXTAREA_TOTAL_CLASS__: "ds-cl-textarea-total";
    __KEYS_NUMBER_INPUT_CLASS__: "ds-cl-number-input";
    __KEYS_FORM_LABEL_CLASS__: "ds-cl-form-label";
    __KEYS_FORM_HELPER_TEXT_CLASS__: "ds-cl-form-helper-text";
    __KEYS_FORM_HEADER_CLASS__: "ds-cl-form-header";
    __KEYS_FORM_DESCRIPTION_CLASS__: "ds-cl-form-description";
    __KEYS_FORM_CONTROL_CLASS__: "ds-cl-form-control";
    __KEYS_FORM_CLASS__: "ds-cl-form";
    __KEY_SKELETON_CLASS__: "ds-cl-skeleton";
    __KEY_SKELETON_CHILD_CLASS__: "ds-cl-skeleton-child";
    __KEY_SKELETON_OVERLAY_CLASS__: "ds-cl-skeleton-overlay";
    __KEYS_SPINNER_CLASS__: "ds-cl-spinner";
    __KEYS_SPINNER_BARS_CLASS__: "ds-cl-bars-spinner";
    __KEYS_SPINNER_COLOR_RING_CLASS__: "ds-cl-color-ring-spinner";
    __KEYS_SPINNER_OVAL_CLASS__: "ds-cl-oval-spinner";
    __KEYS_SPINNER_PUFF_CLASS__: "ds-cl-puff-spinner";
    __KEYS_SPINNER_RINGS_CLASS__: "ds-cl-rings-spinner";
    __KEYS_SPINNER_TAIL_SPIN_CLASS__: "ds-cl-tail-spin-spinner";
    __KEYS_SPINNER_THREE_DOTS_CLASS__: "ds-cl-three-dots-spinner";
    __KEYS_PROGRESS_SECTION_CLASS__: "ds-cl-progress-section";
    __KEYS_PROGRESS_LABEL_CLASS__: "ds-cl-progress-label";
    __KEYS_PROGRESS_CLASS__: "ds-cl-progress";
    __KEYS_ALERT_LABEL_CLASS__: "ds-cl-alert-label";
    __KEYS_ALERT_ICON_CLASS__: "ds-cl-alert-icon";
    __KEYS_ALERT_DESCRIPTION_CLASS__: "ds-cl-alert-description";
    __KEYS_ALERT_CLASS__: "ds-cl-alert";
    __KEYS_MESSAGE_TITLE_CLASS__: "ds-cl-message-title";
    __KEYS_MESSAGE_SUBTITLE_CLASS__: "ds-cl-message-subtitle";
    __KEYS_MESSAGE_STACK_CLASS__: "ds-cl-message-stack";
    __KEYS_MESSAGE_ICON_CLASS__: "ds-cl-message-icon";
    __KEYS_MESSAGE_BODY_CLASS__: "ds-cl-message-body";
    __KEYS_MESSAGE_ACTIONS_CLASS__: "ds-cl-message-actions";
    __KEYS_MESSAGE_CLASS__: "ds-cl-message";
    __KEYS_IMAGE_CLASS__: "ds-cl-image";
    __KEYS_IMAGE_FALLBACK_CLASS__: "ds-cl-image-fallback";
    __KEYS_IMAGE_BORING_CLASS__: "ds-cl-image-boring";
    __KEYS_IMAGE_THUMBNAIL_CLASS__: "ds-cl-image-thumbnail";
    __KEYS_IMAGE_FULL_CLASS__: "ds-cl-image-full";
    __KEYS_ICON_CLASS__: any;
    __KEYS_HEADLINE_CLASS__: "ds-cl-headline";
    __KEY_DUMMY_BADGE_SKELETON_CLASS__: "ds-cl-dummy-badge-skeleton";
    __KEY_DUMMY_BADGE_ICON_CLASS__: "ds-cl-dummy-badge-icon";
    __KEYS_DUMMY_BADGE_CLASS__: "ds-cl-dummy-badge";
    __KEYS_DIVIDER_CLASS__: "ds-cl-divider";
    __KEYS_CAROUSEL_RIGHT_ARROW_BUTTON_CLASS__: "ds-cl-carousel-right-arrow-button";
    __KEYS_CAROUSEL_OVERLAY_RIGHT_ARROW_BUTTON_CLASS__: "ds-cl-carousel-overlay-right-arrow-button";
    __KEYS_CAROUSEL_OVERLAY_LEFT_ARROW_BUTTON_CLASS__: "ds-cl-carousel-overlay-left-arrow-button";
    __KEYS_CAROUSEL_OVERLAY_ARROW_BUTTON_CLASS__: "ds-cl-carousel-overlay-arrow-button";
    __KEYS_CAROUSEL_LEFT_ARROW_BUTTON_CLASS__: "ds-cl-carousel-left-arrow-button";
    __KEYS_CAROUSEL_DOT_CLASS__: "ds-cl-carousel-dot";
    __KEYS_CAROUSEL_DOTS_CLASS__: "ds-cl-carousel-dots";
    __KEYS_CAROUSEL_ARROW_BUTTON_GROUP_CLASS__: "ds-cl-carousel-arrow-button-group";
    __KEYS_CAROUSEL_ARROW_BUTTON_CLASS__: "ds-cl-carousel-arrow-button";
    __KEYS_CAROUSEL_RIGHT_LINEAR_GRADIENT_CLASS__: "ds-cl-carousel-right-linear-gradient";
    __KEYS_CAROUSEL_RIGHT_ARROW_ICON_BUTTON_CLASS__: "ds-cl-carousel-right-arrow-icon-button";
    __KEYS_CAROUSEL_OVERLAY_RIGHT_ARROW_ICON_BUTTON_CLASS__: "ds-cl-carousel-overlay-right-arrow-icon-button";
    __KEYS_CAROUSEL_OVERLAY_LEFT_ARROW_ICON_BUTTON_CLASS__: "ds-cl-carousel-overlay-left-arrow-icon-button";
    __KEYS_CAROUSEL_OVERLAY_ARROW_ICON_BUTTON_CLASS__: "ds-cl-carousel-overlay-arrow-icon-button";
    __KEYS_CAROUSEL_LINEAR_GRADIENT_CLASS__: "ds-cl-carousel-linear-gradient";
    __KEYS_CAROUSEL_LEFT_LINEAR_GRADIENT_CLASS__: "ds-cl-carousel-left-linear-gradient";
    __KEYS_CAROUSEL_LEFT_ARROW_ICON_BUTTON_CLASS__: "ds-cl-carousel-left-arrow-icon-button";
    __KEYS_CAROUSEL_ITEM_CLASS__: "ds-cl-carousel-item";
    __KEYS_CAROUSEL_ARROW_ICON_BUTTON_GROUP_CLASS__: "ds-cl-carousel-arrow-icon-button-group";
    __KEYS_CAROUSEL_ARROW_ICON_BUTTON_CLASS__: "ds-cl-carousel-arrow-icon-button";
    __KEYS_CAROUSEL_CLASS__: "ds-cl-carousel";
    __KEYS_CARD_TITLE_CLASS__: "ds-cl-card-title";
    __KEYS_CARD_SUBTITLE_CLASS__: "ds-cl-card-subtitle";
    __KEYS_CARD_STACK_CLASS__: "ds-cl-card-stack";
    __KEYS_CARD_HEADER_CLASS__: "ds-cl-card-header";
    __KEYS_CARD_FOOTER_CLASS__: "ds-cl-card-footer";
    __KEYS_CARD_DIVIDER_CLASS__: "ds-cl-card-divider";
    __KEYS_CARD_BODY_CLASS__: "ds-cl-card-body";
    __KEYS_CARD_CLASS__: "ds-cl-card";
    __KEYS_BADGE_ICON_CLASS__: "ds-cl-badge-icon";
    __KEYS_BADGE_CLOSE_ICON_BUTTON_CLASS__: "ds-cl-badge-close-icon-button";
    __KEYS_BADGE_CLASS__: "ds-cl-badge";
    __KEYS_BACKGROUND_IMAGE_CLASS__: "ds-cl-background-image";
    __KEYS_BACKGROUND_IMAGE_IMAGE_CLASS__: "ds-cl-background-image-image";
    __KEYS_SCROLL_TO_TOP_ICON_BUTTON_CLASS__: "ds-cl-scroll-to-top-icon-button";
    __KEYS_LINK_CLASS__: "ds-cl-link";
    __KEYS_ICON_BUTTON_GROUP_ITEM_CLASS__: "ds-cl-icon-button-group-item";
    __KEYS_ICON_BUTTON_GROUP_CLASS__: "ds-cl-icon-button-group";
    __KEYS_ICON_BUTTON_CLASS__: "ds-cl-icon-button";
    __KEY_DUMMY_ICON_BUTTON_SKELETON_CLASS__: "ds-cl-dummy-icon-button-skeleton";
    __KEY_DUMMY_ICON_BUTTON_ICON_CLASS__: "ds-cl-dummy-icon-button-icon";
    __KEY_DUMMY_ICON_BUTTON_CLASS__: "ds-cl-dummy-icon-button";
    __KEY_DUMMY_BUTTON_SKELETON_CLASS__: "ds-cl-dummy-button-skeleton";
    __KEY_DUMMY_BUTTON_ICON_CLASS__: "ds-cl-dummy-button-icon";
    __KEY_DUMMY_BUTTON_CLASS__: "ds-cl-dummy-button";
    __KEYS_DELETE_ICON_BUTTON_CLASS__: "ds-cl-delete-icon-button";
    __KEYS_CLOSE_ICON_BUTTON_CLASS__: "ds-cl-close-icon-button";
    __KEYS_CLEAR_ICON_BUTTON_CLASS__: "ds-cl-clear-icon-button";
    __KEYS_BUTTON_GROUP_ITEM_CLASS__: "ds-cl-button-group-item";
    __KEYS_BUTTON_GROUP_CLASS__: "ds-cl-button-group";
    __KEYS_BUTTON_SPINNER_CLASS__: "ds-cl-button-spinner";
    __KEYS_BUTTON_ICON_CLASS__: "ds-cl-button-icon";
    __KEYS_BUTTON_CLASS__: "ds-cl-button";
    __KEYS_BOX_CLASS__: "ds-cl-box";
    __KEYS_BOX__: (keyof BoxOtherProps)[];
    __KEYS_TRANSITION_CLASS__: "ds-cl-transition";
    __KEY_LOCALSTORAGE_COLOR__: "ds_cl_theme_default_color";
    __KEY_LOCALSTORAGE_APP_COLOR__: "ds_cl_theme_app_color";
    __KEY_LOCALSTORAGE_APP_COLORMODE__: "ds_cl_theme_color_mode";
    __KEY_SESSIONSTORAGE_HAS_FILLEDICON_LOADED__: "ds_cl_font_has_filled_icon_loaded";
    __KEY_SESSIONSTORAGE_HAS_OUTLINEDICON_LOADED__: "ds_cl_font_has_outlined_icon_loaded";
    __KEY_SESSIONSTORAGE_HAS_TWOTONEICON_LOADED__: "ds_cl_font_has_twotone_icon_loaded";
};
export * as theme from './common/theme';
export declare const utils: {
    getTabsID: (id: string) => string;
    getTabListID: (id: string) => string;
    getTabID: (id: string, index: number) => string;
    getTabPanelsID: (id: string) => string;
    getTabPanelID: (id: string, index: number) => string;
    getStepID: (id: string, index: number) => string;
    getStepListID: (id: string) => string;
    getStepPanelID: (id: string, index: number) => string;
    getStepPanelsID: (id: string) => string;
    getStepperID: (id: string) => string;
    getStepStatusColor: import("micro-memoize").Memoized<(color: ThemeAppColor, status: StepStatus) => ThemeColor>;
    getStepStatusIcon: import("micro-memoize").Memoized<(status: StepStatus, variant: StepperVariant) => IconKey>;
    getStepStatusLabel: import("micro-memoize").Memoized<(isSelected: boolean, status: StepStatus) => StepStatus>;
    getStepSubtitleID: (id: string) => string;
    getStepTitleID: (id: string) => string;
    getDummyTabsID: (id: string) => string;
    getDummyTabListID: (id: string) => string;
    getDummyTabID: (id: string, index: number) => string;
    getDummyTabPanelsID: (id: string) => string;
    getDummyTabPanelID: (id: string, index: number) => string;
    getStatusColor: import("micro-memoize").Memoized<(status: AlertStatus, color?: ThemeColor) => ThemeColor>;
    getStatusIcon: import("micro-memoize").Memoized<(status: AlertStatus) => IconKey>;
    getCarouselID: (id: string) => string;
    getCarouselItemID: (id: string, index: number) => string;
    checkColorType: import("micro-memoize").Memoized<(color: string) => "other" | "class" | "theme">;
    checkDurationType: import("micro-memoize").Memoized<(duration: string | number) => "other" | "class" | "theme">;
    checkFontSizeType: import("micro-memoize").Memoized<(size: string | number) => "other" | "class" | "theme">;
    checkIsTouchDevice: import("micro-memoize").Memoized<() => boolean>;
    convertPixelsToREM: import("micro-memoize").Memoized<(px: number) => number>;
    convertREMToPixels: import("micro-memoize").Memoized<(rem: number) => number>;
    convertStringToNumber: import("micro-memoize").Memoized<(string: string, cut: string) => number>;
    filterColorHex: import("micro-memoize").Memoized<({ color, colorMode, amount }: common_utils.FilterColorHexProps) => string>;
    getAmount: import("micro-memoize").Memoized<(colorMode: ThemeAppColorMode, type: import("./common/utils/amount").GetAmountType) => number>;
    getAnimationConfig: import("micro-memoize").Memoized<() => AnimationConfig>;
    getAnimationDelay: import("micro-memoize").Memoized<(delay?: ThemeDelay, amount?: number) => number>;
    getAnimationDuration: import("micro-memoize").Memoized<(duration?: ThemeDuration, amount?: number) => number>;
    getAnimationEasings: import("micro-memoize").Memoized<(easing?: ThemeEase) => AnimationEasing>;
    getClass: import("micro-memoize").Memoized<(<D>(responsiveValue: ResponsiveValue<D>, keys?: string[]) => string)>;
    getColorClass: import("micro-memoize").Memoized<(props: common_utils.GetColorClassProps) => string>;
    getColorHex: import("micro-memoize").Memoized<(props: common_utils.GetColorHexProps) => string>;
    getColorHue: import("micro-memoize").Memoized<({ colorMode, type }: common_utils.GetColorHueProps) => ThemeColorHue>;
    getColorMode: import("micro-memoize").Memoized<() => ThemeAppColorMode>;
    getFontSizeHeight: import("micro-memoize").Memoized<(fontSize?: ThemeFontSize, lineHeight?: ThemeLineHeight) => number>;
    getIconFontFamily: import("micro-memoize").Memoized<(category: IconCategory) => string>;
    getPercentage: import("micro-memoize").Memoized<(value: number, max: number, min: number) => number>;
    getResponsiveValue: import("micro-memoize").Memoized<(<D_1>(value: ResponsiveValue<D_1>) => D_1)>;
};
export { Alert, AlertDescription, AlertIcon, AlertLabel, AnimatePresence, AspectRatio, BackdropOverlay, BackgroundImage, Badge, BadgeCloseIconButton, BadgeIcon, Box, Button, ButtonGroup, ButtonGroupItem, ButtonIcon, ButtonSpinner, CardBody, CardDivider, CardFooter, CardHeader, CardStack, CardSubtitle, CardTitle, Carousel, CarouselArrowButton, CarouselArrowButtonGroup, CarouselArrowIconButton, CarouselArrowIconButtonGroup, CarouselDots, CarouselLeftArrowButton, CarouselLeftArrowIconButton, CarouselLeftLinearGradient, CarouselLinearGradient, CarouselOverlayArrowButton, CarouselOverlayArrowIconButton, CarouselOverlayLeftArrowButton, CarouselOverlayLeftArrowIconButton, CarouselOverlayRightArrowButton, CarouselOverlayRightArrowIconButton, CarouselRightArrowButton, CarouselRightArrowIconButton, CarouselRightLinearGradient, Center, Checkbox, ClearIconButton, CloseIconButton, ConfirmModal, Container, CopyButton, DeleteIconButton, Divider, DummyBadge, DummyBadgeIcon, DummyBadgeSkeleton, DummyButton, DummyButtonIcon, DummyButtonSkeleton, DummyIconButton, DummyIconButtonIcon, DummyIconButtonSkeleton, DummyPushableOverlay, DummyTab, DummyTabIcon, DummyTabList, DummyTabPanels, DummyTabs, EmailInput, ErrorBoundary, FileButton, FileInput, Form, FormControl, FormDescription, FormHeader, FormHelperText, FormLabel, GlassOverlay, Grid, GridItem, Headline, HoverOverlay, HStack, Icon, IconButton, IconButtonGroup, IconButtonGroupItem, IconButtonIcon, IconButtonSpinner, Image, Indicator, LinearGradient, Link, LoadingOverlay, Message, MessageActions, MessageBody, MessageIcon, MessageStack, MessageSubtitle, MessageTitle, Modal, NumberInput, PasswordInput, Popper, PositionOverlay, Progress, ProgressLabel, ProgressSection, Provider, PushableOverlay, Radio, Rating, ScrollToTopIconButton, SearchInput, SimpleGrid, Skeleton, Space, Spinner, Stack, StateOverlay, Suspense, Switch, Tab, TabIcon, TabList, TabPanels, Tabs, Text, Textarea, TextInput, Tooltip, Transition, VisuallyHidden, VStack };
export type { AlignContentClass, AlignContentClassArr, AlignContentClassObj, AlignItemsClass, AlignItemsClassArr, AlignItemsClassObj, AlignSelfClass, AlignSelfClassArr, AlignSelfClassObj, AnimationClass, AnimationClassArr, AnimationClassObj, AnimationConfig, AnimationDelay, AnimationDuration, AnimationEasing, BackgroundAttachmentClass, BackgroundAttachmentClassArr, BackgroundAttachmentClassObj, BackgroundBlendModeClass, BackgroundBlendModeClassArr, BackgroundBlendModeClassObj, BackgroundClipClass, BackgroundClipClassArr, BackgroundClipClassObj, BackgroundColorClass, BackgroundColorClassArr, BackgroundColorClassObj, BackgroundOriginClass, BackgroundOriginClassArr, BackgroundOriginClassObj, BackgroundPositionClass, BackgroundPositionClassArr, BackgroundPositionClassObj, BackgroundRepeatClass, BackgroundRepeatClassArr, BackgroundRepeatClassObj, BackgroundSizeClass, BackgroundSizeClassArr, BackgroundSizeClassObj, BorderColorClass, BorderColorClassArr, BorderColorClassObj, BorderStyleClass, BorderStyleClassArr, BorderStyleClassObj, BoxShadowClass, BoxShadowClassArr, BoxShadowClassObj, BoxShadowColorClass, BoxShadowColorClassArr, BoxShadowColorClassObj, BrightnessClass, BrightnessClassArr, BrightnessClassObj, CaretColorClass, CaretColorClassArr, CaretColorClassObj, ClassName, ClassNames, ColorTypeClass, ContrastClass, ContrastClassArr, ContrastClassObj, CursorClass, CursorClassArr, CursorClassObj, DisplayClass, DisplayClassArr, DisplayClassObj, DropShadowClass, DropShadowClassArr, DropShadowClassObj, FillColorClass, FillColorClassArr, FillColorClassObj, FlexColumnClass, FlexColumnClassArr, FlexColumnClassObj, FlexDirectionClass, FlexDirectionClassArr, FlexDirectionClassObj, FlexWrapClass, FlexWrapClassArr, FlexWrapClassObj, FontStyleClass, FontStyleClassArr, FontStyleClassObj, GradientClass, GradientClassArr, GradientClassObj, GradientFromColorClass, GradientFromColorClassArr, GradientFromColorClassObj, GradientFromMiddleToClass, GradientFromMiddleToClassArr, GradientFromMiddleToClassObj, GradientMiddleColorClass, GradientMiddleColorClassArr, GradientMiddleColorClassObj, GradientToColorClass, GradientToColorClassArr, GradientToColorClassObj, GrayscaleClass, GrayscaleClassArr, GrayscaleClassObj, GridAutoClass, GridAutoClassArr, GridAutoClassObj, GridAutoFlowClass, GridAutoFlowClassArr, GridAutoFlowClassObj, GridColumnClass, GridColumnClassArr, GridColumnClassObj, GridColumnSpanClass, GridColumnSpanClassArr, GridColumnSpanClassObj, GridColumnStartEndClass, GridColumnStartEndClassArr, GridColumnStartEndClassObj, GridRowClass, GridRowClassArr, GridRowClassObj, GridRowSpanClass, GridRowSpanClassArr, GridRowSpanClassObj, GridRowStartEndClass, GridRowStartEndClassArr, GridRowStartEndClassObj, GridTemplateColumnsClass, GridTemplateColumnsClassArr, GridTemplateColumnsClassObj, GridTemplateRowsClass, GridTemplateRowsClassArr, GridTemplateRowsClassObj, HeightClass, HeightClassArr, HeightClassObj, HueRotateClass, HueRotateClassArr, HueRotateClassObj, IconKey, IconKeys, InvertClass, InvertClassArr, InvertClassObj, JustifyContentClass, JustifyContentClassArr, JustifyContentClassObj, JustifyItemsClass, JustifyItemsClassArr, JustifyItemsClassObj, JustifySelfClass, JustifySelfClassArr, JustifySelfClassObj, MaxHeightClass, MaxHeightClassArr, MaxHeightClassObj, MaxWidthClass, MaxWidthClassArr, MaxWidthClassObj, MinHeightClass, MinHeightClassArr, MinHeightClassObj, MinWidthClass, MinWidthClassArr, MinWidthClassObj, MixBlendModeClass, MixBlendModeClassArr, MixBlendModeClassObj, Nullish, ObjectFitClass, ObjectFitClassArr, ObjectFitClassObj, ObjectPositionClass, ObjectPositionClassArr, ObjectPositionClassObj, OpacityClass, OpacityClassArr, OpacityClassObj, OutlineColorClass, OutlineColorClassArr, OutlineColorClassObj, OutlineOffsetClass, OutlineOffsetClassArr, OutlineOffsetClassObj, OutlineStyleClass, OutlineStyleClassArr, OutlineStyleClassObj, OutlineWidthClass, OutlineWidthClassArr, OutlineWidthClassObj, OverflowClass, OverflowClassArr, OverflowClassObj, PickFrom, PlaceContentClass, PlaceContentClassArr, PlaceContentClassObj, PlaceItemsClass, PlaceItemsClassArr, PlaceItemsClassObj, PlaceSelfClass, PlaceSelfClassArr, PlaceSelfClassObj, PointerEventsClass, PointerEventsClassArr, PointerEventsClassObj, PolymorphicChangeEvent, PolymorphicComponentProps, PolymorphicDefaultElement, PolymorphicFocusEvent, PolymorphicFormEvent, PolymorphicMouseEvent, PolymorphicRef, PositionClass, PositionClassArr, PositionClassObj, ResizeClass, ResizeClassArr, ResizeClassObj, ResponsiveArrayValue, ResponsiveObjectValue, ResponsiveValue, RotateClass, RotateClassArr, RotateClassObj, SaturateClass, SaturateClassArr, SaturateClassObj, ScaleClass, ScaleClassArr, ScaleClassObj, ScrollbarClass, ScrollbarClassArr, ScrollbarClassObj, ScrollBehaviorClass, ScrollBehaviorClassArr, ScrollBehaviorClassObj, ScrollSnapAlignClass, ScrollSnapAlignClassArr, ScrollSnapAlignClassObj, ScrollSnapStopClass, ScrollSnapStopClassArr, ScrollSnapStopClassObj, ScrollSnapTypeClass, ScrollSnapTypeClassArr, ScrollSnapTypeClassObj, SepiaClass, SepiaClassArr, SepiaClassObj, SkewClass, SkewClassArr, SkewClassObj, Style, TextAlignClass, TextAlignClassArr, TextAlignClassObj, TextColorClass, TextColorClassArr, TextColorClassObj, TextDecorationClass, TextDecorationClassArr, TextDecorationClassObj, TextDecorationColorClass, TextDecorationColorClassArr, TextDecorationColorClassObj, TextDecorationStyleClass, TextDecorationStyleClassArr, TextDecorationStyleClassObj, TextDecorationThicknessClass, TextDecorationThicknessClassArr, TextDecorationThicknessClassObj, TextLetterSpacingClass, TextLetterSpacingClassArr, TextLetterSpacingClassObj, TextLineClampClass, TextLineClampClassArr, TextLineClampClassObj, TextOverflowClass, TextOverflowClassArr, TextOverflowClassObj, TextTransformClass, TextTransformClassArr, TextTransformClassObj, TextUnderlineOffsetClass, TextUnderlineOffsetClassArr, TextUnderlineOffsetClassObj, ThemeAppAppearanceProps, ThemeAppColor, ThemeAppColorArr, ThemeAppColorMode, ThemeAppColorObj, ThemeAppearanceProps, ThemeAspectRatio, ThemeAspectRatioArr, ThemeAspectRatioObj, ThemeBlurClass, ThemeBlurClassArr, ThemeBlurClassObj, ThemeBorderWidth, ThemeBorderWidthArr, ThemeBorderWidthObj, ThemeBreakpoint, ThemeBreakpointArr, ThemeBreakpointObj, ThemeColor, ThemeColorArr, ThemeColorHue, ThemeColorHueArr, ThemeColorHueObj, ThemeColorMode, ThemeColorModeArr, ThemeColorModeObj, ThemeColorObj, ThemeColorOpacityObj, ThemeDelay, ThemeDelayArr, ThemeDelayObj, ThemeDuration, ThemeDurationArr, ThemeDurationObj, ThemeEase, ThemeEaseArr, ThemeEaseObj, ThemeFontSize, ThemeFontSizeArr, ThemeFontSizeObj, ThemeFontWeight, ThemeFontWeightArr, ThemeFontWeightObj, ThemeLineHeight, ThemeLineHeightArr, ThemeLineHeightObj, ThemeRadius, ThemeRadiusArr, ThemeRadiusObj, ThemeSpacing, ThemeSpacingArr, ThemeSpacingObj, ThemeStrokeWidth, ThemeStrokeWidthArr, ThemeStrokeWidthObj, TransformOriginClass, TransformOriginClassArr, TransformOriginClassObj, Undefinable, UserSelectClass, UserSelectClassArr, UserSelectClassObj, WhitespaceClass, WhitespaceClassArr, WhitespaceClassObj, WidthClass, WidthClassArr, WidthClassObj, WillChangeClass, WillChangeClassArr, WillChangeClassObj, WordBreakClass, WordBreakClassArr, WordBreakClassObj, ZIndexClass, ZIndexClassArr, ZIndexClassObj };
export type { AlertContext, AlertDescriptionDefaultElement, AlertDescriptionElement, AlertDescriptionProps, AlertDescriptionRef, AlertDuration, AlertIconDefaultElement, AlertIconElement, AlertIconProps, AlertIconRef, AlertLabelDefaultElement, AlertLabelElement, AlertLabelProps, AlertLabelRef, AlertProps, AlertRef, AlertRenderActionsProps, AlertRenderCloseProps, AlertStatus, AlertVariant, AnimatePresenceProps, AnimationContext, AspectRatioProps, AspectRatioRef, BackdropOverlayBlurType, BackdropOverlayBlurTypes, BackdropOverlayProps, BackdropOverlayRef, BackgroundImageFilters, BackgroundImageOptions, BackgroundImageProps, BackgroundImageRef, BadgeCloseIconButtonDefaultElement, BadgeCloseIconButtonElement, BadgeCloseIconButtonProps, BadgeCloseIconButtonRef, BadgeContext, BadgeIconDefaultElement, BadgeIconElement, BadgeIconProps, BadgeIconRef, BadgeProps, BadgeRef, BadgeRenderProps, BadgeSize, BadgeVariant, BoxHeight, BoxMaxHeight, BoxMaxWidth, BoxMinHeight, BoxMinWidth, BoxOtherProps, BoxProps, BoxRef, BoxWidth, ButtonContext, ButtonDefaultElement, ButtonElement, ButtonGroupContext, ButtonGroupItemProps, ButtonGroupItemRef, ButtonGroupProps, ButtonGroupRef, ButtonIconDefaultElement, ButtonIconElement, ButtonIconProps, ButtonIconRef, ButtonMouseEvent, ButtonProps, ButtonRef, ButtonRenderProps, ButtonSize, ButtonSpinnerProps, ButtonSpinnerRef, ButtonVariant, CardBodyProps, CardBodyRef, CardContext, CardDividerDefaultElement, CardDividerElement, CardDividerProps, CardDividerRef, CardFooterProps, CardFooterRef, CardHeaderProps, CardHeaderRef, CardHeaderRenderProps, CardMouseEvent, CardProps, CardRef, CardStackProps, CardStackRef, CardSubtitleDefaultElement, CardSubtitleElement, CardSubtitleProps, CardSubtitleRef, CardTitleDefaultElement, CardTitleElement, CardTitleProps, CardTitleRef, CardVariant, CarouselArrowButtonDefaultElement, CarouselArrowButtonElement, CarouselArrowButtonGroupProps, CarouselArrowButtonGroupRef, CarouselArrowButtonMouseEvent, CarouselArrowButtonProps, CarouselArrowButtonRef, CarouselArrowDirection, CarouselArrowIconButtonDefaultElement, CarouselArrowIconButtonElement, CarouselArrowIconButtonGroupProps, CarouselArrowIconButtonGroupRef, CarouselArrowIconButtonMouseEvent, CarouselArrowIconButtonProps, CarouselArrowIconButtonRef, CarouselContext, CarouselDotProps, CarouselDotRef, CarouselDotsProps, CarouselDotsRef, CarouselDotsType, CarouselDotType, CarouselItem, CarouselItems, CarouselLeftArrowButtonDefaultElement, CarouselLeftArrowButtonElement, CarouselLeftArrowButtonProps, CarouselLeftArrowButtonRef, CarouselLeftArrowIconButtonDefaultElement, CarouselLeftArrowIconButtonElement, CarouselLeftArrowIconButtonProps, CarouselLeftArrowIconButtonRef, CarouselLeftLinearGradientProps, CarouselLeftLinearGradientRef, CarouselLinearGradientProps, CarouselLinearGradientRef, CarouselOrientation, CarouselOverlayArrowButtonDefaultElement, CarouselOverlayArrowButtonElement, CarouselOverlayArrowButtonProps, CarouselOverlayArrowButtonRef, CarouselOverlayArrowIconButtonDefaultElement, CarouselOverlayArrowIconButtonElement, CarouselOverlayArrowIconButtonProps, CarouselOverlayArrowIconButtonRef, CarouselOverlayLeftArrowButtonDefaultElement, CarouselOverlayLeftArrowButtonElement, CarouselOverlayLeftArrowButtonProps, CarouselOverlayLeftArrowButtonRef, CarouselOverlayLeftArrowIconButtonDefaultElement, CarouselOverlayLeftArrowIconButtonElement, CarouselOverlayLeftArrowIconButtonProps, CarouselOverlayLeftArrowIconButtonRef, CarouselOverlayRightArrowButtonDefaultElement, CarouselOverlayRightArrowButtonElement, CarouselOverlayRightArrowButtonProps, CarouselOverlayRightArrowButtonRef, CarouselOverlayRightArrowIconButtonDefaultElement, CarouselOverlayRightArrowIconButtonElement, CarouselOverlayRightArrowIconButtonProps, CarouselOverlayRightArrowIconButtonRef, CarouselProps, CarouselRef, CarouselRenderIconButtonProps, CarouselRightArrowButtonDefaultElement, CarouselRightArrowButtonElement, CarouselRightArrowButtonProps, CarouselRightArrowButtonRef, CarouselRightArrowIconButtonDefaultElement, CarouselRightArrowIconButtonElement, CarouselRightArrowIconButtonProps, CarouselRightArrowIconButtonRef, CarouselRightLinearGradientProps, CarouselRightLinearGradientRef, CarouselScrollAmount, CarouselVariant, CenterProps, CenterRef, CheckboxChangeEvent, CheckboxFocusEvent, CheckboxLabelPosition, CheckboxMouseEvent, CheckboxProps, CheckboxRef, CheckboxSize, ClearIconButtonDefaultElement, ClearIconButtonElement, ClearIconButtonProps, ClearIconButtonRef, CloseIconButtonDefaultElement, CloseIconButtonElement, CloseIconButtonProps, CloseIconButtonRef, ConfirmModalActionsProps, ConfirmModalActionsRef, ConfirmModalActionsRenderActionProps, ConfirmModalActionsRenderCancelProps, ConfirmModalBackdropProps, ConfirmModalBackdropRef, ConfirmModalBodyProps, ConfirmModalBodyRef, ConfirmModalContext, ConfirmModalDefaultElement, ConfirmModalElement, ConfirmModalIconDefaultElement, ConfirmModalIconElement, ConfirmModalIconProps, ConfirmModalIconRef, ConfirmModalProps, ConfirmModalRef, ConfirmModalRenderBackdropProps, ConfirmModalRenderCancelProps, ConfirmModalRenderTriggerProps, ConfirmModalSize, ConfirmModalStackProps, ConfirmModalStackRef, ConfirmModalSubtitleDefaultElement, ConfirmModalSubtitleElement, ConfirmModalSubtitleProps, ConfirmModalSubtitleRef, ConfirmModalTitleDefaultElement, ConfirmModalTitleElement, ConfirmModalTitleProps, ConfirmModalTitleRef, ContainerBreakpoint, ContainerBreakpoints, ContainerProps, ContainerRef, CopyButtonChildrenProps, CopyButtonProps, CopyButtonTimeout, DeleteIconButtonDefaultElement, DeleteIconButtonElement, DeleteIconButtonProps, DeleteIconButtonRef, DividerDefaultElement, DividerElement, DividerPlacement, DividerProps, DividerRef, DividerVariant, DummyBadgeContext, DummyBadgeIconDefaultElement, DummyBadgeIconElement, DummyBadgeIconProps, DummyBadgeIconRef, DummyBadgeProps, DummyBadgeRef, DummyBadgeRenderProps, DummyBadgeSize, DummyBadgeSkeletonProps, DummyBadgeSkeletonRef, DummyBadgeVariant, DummyButtonContext, DummyButtonIconDefaultElement, DummyButtonIconElement, DummyButtonIconProps, DummyButtonIconRef, DummyButtonProps, DummyButtonRef, DummyButtonRenderProps, DummyButtonSize, DummyButtonSkeletonProps, DummyButtonSkeletonRef, DummyButtonVariant, DummyIconButtonContext, DummyIconButtonIconDefaultElement, DummyIconButtonIconElement, DummyIconButtonIconProps, DummyIconButtonIconRef, DummyIconButtonProps, DummyIconButtonRef, DummyIconButtonSize, DummyIconButtonSkeletonProps, DummyIconButtonSkeletonRef, DummyIconButtonVariant, DummyPushableOverlayProps, DummyPushableOverlayRef, DummyPushableOverlayVariant, DummyTabIconDefaultElement, DummyTabIconElement, DummyTabIconProps, DummyTabIconRef, DummyTabListProps, DummyTabListRef, DummyTabListRenderProps, DummyTabPanelProps, DummyTabPanelsProps, DummyTabPanelsRef, DummyTabProps, DummyTabRef, DummyTabRenderProps, DummyTabsAlign, DummyTabsContext, DummyTabsOrientation, DummyTabsProps, DummyTabsRef, DummyTabsSize, EmailInputChangeEvent, EmailInputDefaultElement, EmailInputElement, EmailInputFocusEvent, EmailInputMouseEvent, EmailInputProps, EmailInputRef, EmailInputRenderProps, EmailInputSize, EmailInputVariant, ErrorBoundaryProps, FileButtonBlob, FileButtonBlobs, FileButtonChangeEvent, FileButtonChildrenProps, FileButtonError, FileButtonErrors, FileButtonMouseEvent, FileButtonProps, FileInputBlob, FileInputBlobs, FileInputChangeEvent, FileInputDefaultElement, FileInputElement, FileInputError, FileInputErrors, FileInputFocusEvent, FileInputMouseEvent, FileInputProps, FileInputRef, FileInputRenderProps, FileInputSize, FileInputVariant, FormControlContext, FormControlProps, FormControlRef, FormControlSize, FormDescriptionDefaultElement, FormDescriptionElement, FormDescriptionProps, FormDescriptionRef, FormHeaderProps, FormHeaderRef, FormHeaderRenderProps, FormHelperTextDefaultElement, FormHelperTextElement, FormHelperTextProps, FormHelperTextRef, FormLabelDefaultElement, FormLabelElement, FormLabelProps, FormLabelRef, FormProps, FormRef, FormsCommonProps, FormsCommonSize, FormsCommonVariant, GlassOverlayBlurType, GlassOverlayBlurTypes, GlassOverlayProps, GlassOverlayRef, GridItemProps, GridItemRef, GridProps, GridRef, HeadlineProps, HeadlineRef, HeadlineRenderProps, HoverOverlayMouseEvent, HoverOverlayProps, HoverOverlayRef, HStackProps, HStackRef, IconButtonContext, IconButtonDefaultElement, IconButtonElement, IconButtonGroupContext, IconButtonGroupItemProps, IconButtonGroupItemRef, IconButtonGroupProps, IconButtonGroupRef, IconButtonIconDefaultElement, IconButtonIconElement, IconButtonIconProps, IconButtonIconRef, IconButtonMouseEvent, IconButtonProps, IconButtonRef, IconButtonRenderProps, IconButtonSize, IconButtonSpinnerProps, IconButtonSpinnerRef, IconButtonVariant, IconCategory, IconDefaultElement, IconElement, IconFontContext, IconProps, IconRef, IconVariant, ImageFilters, ImageMode, ImageModes, ImageOptions, ImageProps, ImageRef, ImageSyntheticEvent, ImageType, IndicatorPlacement, IndicatorPlacements, IndicatorProps, IndicatorRef, LinearGradientColor, LinearGradientDirection, LinearGradientDirections, LinearGradientProps, LinearGradientRef, LinkDefaultElement, LinkElement, LinkMouseEvent, LinkProps, LinkRef, LoadingOverlayBlurType, LoadingOverlayBlurTypes, LoadingOverlayProps, LoadingOverlayRef, MessageActionsChildrenProps, MessageActionsProps, MessageActionsRef, MessageBodyProps, MessageBodyRef, MessageContext, MessageIconDefaultElement, MessageIconElement, MessageIconProps, MessageIconRef, MessageProps, MessageRef, MessageStackProps, MessageStackRef, MessageSubtitleDefaultElement, MessageSubtitleElement, MessageSubtitleProps, MessageSubtitleRef, MessageTitleDefaultElement, MessageTitleElement, MessageTitleProps, MessageTitleRef, MessageVariant, ModalBackdropProps, ModalBackdropRef, ModalBodyProps, ModalBodyRef, ModalContext, ModalDefaultElement, ModalElement, ModalFooterProps, ModalFooterRef, ModalFooterRenderActionProps, ModalFooterRenderCancelProps, ModalHeaderProps, ModalHeaderRef, ModalHeaderRenderCancelProps, ModalProps, ModalRef, ModalRenderBackdropProps, ModalRenderTriggerProps, ModalSize, ModalStackProps, ModalStackRef, ModalSubtitleDefaultElement, ModalSubtitleElement, ModalSubtitleProps, ModalSubtitleRef, ModalTitleDefaultElement, ModalTitleElement, ModalTitleProps, ModalTitleRef, NumberInputChangeEvent, NumberInputDefaultElement, NumberInputElement, NumberInputFocusEvent, NumberInputMouseEvent, NumberInputProps, NumberInputRef, NumberInputRenderControlsProps, NumberInputRenderProps, NumberInputSize, NumberInputVariant, PasswordInputChangeEvent, PasswordInputDefaultElement, PasswordInputElement, PasswordInputFocusEvent, PasswordInputMouseEvent, PasswordInputProps, PasswordInputRef, PasswordInputRenderProps, PasswordInputSize, PasswordInputVariant, PopperPlacement, PopperProps, PopperRef, PositionOverlayBlurType, PositionOverlayBlurTypes, PositionOverlayPlacement, PositionOverlayPlacements, PositionOverlayProps, PositionOverlayRef, ProgressContext, ProgressLabelDefaultElement, ProgressLabelElement, ProgressLabelProps, ProgressLabelRef, ProgressProps, ProgressRef, ProgressSectionProps, ProgressSectionRef, ProviderContext, ProviderProps, PushableOverlayProps, PushableOverlayRef, PushableOverlayVariant, RadioChangeEvent, RadioFocusEvent, RadioLabelPosition, RadioMouseEvent, RadioProps, RadioRef, RadioSize, RatingDirection, RatingIcons, RatingProps, RatingRef, RatingSize, ScrollToTopIconButtonDefaultElement, ScrollToTopIconButtonElement, ScrollToTopIconButtonMouseEvent, ScrollToTopIconButtonProps, ScrollToTopIconButtonRef, SearchInputChangeEvent, SearchInputDefaultElement, SearchInputElement, SearchInputFocusEvent, SearchInputMouseEvent, SearchInputProps, SearchInputRef, SearchInputRenderProps, SearchInputSize, SearchInputVariant, SimpleGridColumn, SimpleGridColumns, SimpleGridProps, SimpleGridRef, SkeletonProps, SkeletonRef, SpaceProps, SpaceRef, SpinnerBarsVariant, SpinnerColorRingVariant, SpinnerOvalVariant, SpinnerProps, SpinnerPuffVariant, SpinnerRef, SpinnerRingsVariant, SpinnerRotatingLinesVariant, SpinnerSize, SpinnerTailSpinVariant, SpinnerThreeDotsVariant, SpinnerVariant, StackProps, StackRef, StateOverlayProps, StateOverlayRef, StateOverlayState, SuspenseProps, SwitchChangeEvent, SwitchFocusEvent, SwitchLabelPosition, SwitchMouseEvent, SwitchProps, SwitchRef, SwitchSize, TabDefaultElement, TabElement, TabIconDefaultElement, TabIconElement, TabIconProps, TabIconRef, TabListProps, TabListRef, TabListRenderProps, TabMouseEvent, TabPanelProps, TabPanelsProps, TabPanelsRef, TabProps, TabRef, TabRenderProps, TabsAlign, TabsContext, TabsOrientation, TabsProps, TabsRef, TabsSize, TextareaChangeEvent, TextareaDefaultElement, TextareaElement, TextareaFocusEvent, TextareaMouseEvent, TextareaProps, TextareaRef, TextareaRenderProps, TextareaSize, TextareaVariant, TextDefaultElement, TextElement, TextInputChangeEvent, TextInputDefaultElement, TextInputElement, TextInputFocusEvent, TextInputMouseEvent, TextInputProps, TextInputRef, TextInputRenderProps, TextInputSize, TextInputVariant, TextProps, TextRef, TextThemeAppearanceProps, TooltipPlacement, TooltipProps, TooltipRef, TransitionDelay, TransitionDuration, TransitionKey, TransitionOtherProps, TransitionProps, TransitionRef, TransitionVariant, TransitionVariantKey, TransitionVariants, VisuallyHiddenDefaultElement, VisuallyHiddenElement, VisuallyHiddenProps, VisuallyHiddenRef, VStackProps, VStackRef };
//# sourceMappingURL=index.d.ts.map